/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;
using System.IO;
using CS426.node;
using CS426.lexer;
using CS426.analysis;

namespace CS426.parser {

public class ParserException : ApplicationException
{
    Token token;

    public ParserException(Token token, String  message) : base(message)
    {
        this.token = token;
    }

    public Token Token
    {
      get { return token; }
    }
}

internal class State
{
    internal int state;
    internal ArrayList nodes;

    internal State(int state, ArrayList nodes)
    {
        this.state = state;
        this.nodes = nodes;
    }
}

internal class TokenIndex : AnalysisAdapter
{
    internal int index;

    public override void CaseTPlus(TPlus node)
    {
        index = 0;
    }

    public override void CaseTMult(TMult node)
    {
        index = 1;
    }

    public override void CaseTAssign(TAssign node)
    {
        index = 2;
    }

    public override void CaseTEol(TEol node)
    {
        index = 3;
    }

    public override void CaseTDivide(TDivide node)
    {
        index = 4;
    }

    public override void CaseTSubtract(TSubtract node)
    {
        index = 5;
    }

    public override void CaseTLparen(TLparen node)
    {
        index = 6;
    }

    public override void CaseTRparen(TRparen node)
    {
        index = 7;
    }

    public override void CaseTLb(TLb node)
    {
        index = 8;
    }

    public override void CaseTRb(TRb node)
    {
        index = 9;
    }

    public override void CaseTLt(TLt node)
    {
        index = 10;
    }

    public override void CaseTGt(TGt node)
    {
        index = 11;
    }

    public override void CaseTLte(TLte node)
    {
        index = 12;
    }

    public override void CaseTGte(TGte node)
    {
        index = 13;
    }

    public override void CaseTAnd(TAnd node)
    {
        index = 14;
    }

    public override void CaseTOr(TOr node)
    {
        index = 15;
    }

    public override void CaseTNot(TNot node)
    {
        index = 16;
    }

    public override void CaseTEquals(TEquals node)
    {
        index = 17;
    }

    public override void CaseTComma(TComma node)
    {
        index = 18;
    }

    public override void CaseTPeriod(TPeriod node)
    {
        index = 19;
    }

    public override void CaseTIf(TIf node)
    {
        index = 20;
    }

    public override void CaseTElse(TElse node)
    {
        index = 21;
    }

    public override void CaseTWhile(TWhile node)
    {
        index = 22;
    }

    public override void CaseTMain(TMain node)
    {
        index = 23;
    }

    public override void CaseTReturn(TReturn node)
    {
        index = 24;
    }

    public override void CaseTConstant(TConstant node)
    {
        index = 25;
    }

    public override void CaseTId(TId node)
    {
        index = 26;
    }

    public override void CaseTInteger(TInteger node)
    {
        index = 27;
    }

    public override void CaseTFloat(TFloat node)
    {
        index = 28;
    }

    public override void CaseTString(TString node)
    {
        index = 29;
    }

    public override void CaseEOF(EOF node)
    {
        index = 30;
    }
}

public class Parser
{
    private Analysis ignoredTokens = new AnalysisAdapter();
    public Analysis IgnoredTokens
    {
      get { return ignoredTokens; }
    }

    protected ArrayList nodeList;

    private Lexer lexer;
    private Stack stack = new Stack();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private TokenIndex converter = new TokenIndex();
    private int[] action = new int[2];

    private const int SHIFT = 0;
    private const int REDUCE = 1;
    private const int ACCEPT = 2;
    private const int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    private int GoTo(int index)
    {
        int state = State();
        int low = 1;
        int high = gotoTable[index].Length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void Push(int numstate, ArrayList listNode)
    {
        this.nodeList = listNode;

        stack.Push(new State(numstate, this.nodeList));
    }

    private int State()
    {
        State s = (State) stack.Peek();
        return s.state;
    }

    private ArrayList Pop()
    {
        return (ArrayList) ((State) stack.Pop()).nodes;
    }

    private int Index(Switchable token)
    {
        converter.index = -1;
        token.Apply(converter);
        return converter.index;
    }

    public Start Parse()
    {
        Push(0, null);

        IList ign = null;
        while(true)
        {
            while(Index(lexer.Peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedList(NodeCast.Instance);
                }

                ign.Add(lexer.Next());
            }

            if(ign != null)
            {
                ignoredTokens.SetIn(lexer.Peek(), ign);
                ign = null;
            }

            last_pos = lexer.Peek().Pos;
            last_line = lexer.Peek().Line;
            last_token = lexer.Peek();

            int index = Index(lexer.Peek());
            action[0] = actionTable[State()][0][1];
            action[1] = actionTable[State()][0][2];

            int low = 1;
            int high = actionTable[State()].Length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[State()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[State()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[State()][middle][1];
                    action[1] = actionTable[State()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
        {
            ArrayList list = new ArrayList();
            list.Add(lexer.Next());
                        Push(action[1], list);
                        last_shift = action[1];
                    }
        break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0:
        {
      ArrayList list = New0();
      Push(GoTo(0), list);
        }
        break;
                    case 1:
        {
      ArrayList list = New1();
      Push(GoTo(0), list);
        }
        break;
                    case 2:
        {
      ArrayList list = New2();
      Push(GoTo(0), list);
        }
        break;
                    case 3:
        {
      ArrayList list = New3();
      Push(GoTo(0), list);
        }
        break;
                    case 4:
        {
      ArrayList list = New4();
      Push(GoTo(1), list);
        }
        break;
                    case 5:
        {
      ArrayList list = New5();
      Push(GoTo(1), list);
        }
        break;
                    case 6:
        {
      ArrayList list = New6();
      Push(GoTo(2), list);
        }
        break;
                    case 7:
        {
      ArrayList list = New7();
      Push(GoTo(3), list);
        }
        break;
                    case 8:
        {
      ArrayList list = New8();
      Push(GoTo(4), list);
        }
        break;
                    case 9:
        {
      ArrayList list = New9();
      Push(GoTo(4), list);
        }
        break;
                    case 10:
        {
      ArrayList list = New10();
      Push(GoTo(5), list);
        }
        break;
                    case 11:
        {
      ArrayList list = New11();
      Push(GoTo(5), list);
        }
        break;
                    case 12:
        {
      ArrayList list = New12();
      Push(GoTo(6), list);
        }
        break;
                    case 13:
        {
      ArrayList list = New13();
      Push(GoTo(6), list);
        }
        break;
                    case 14:
        {
      ArrayList list = New14();
      Push(GoTo(6), list);
        }
        break;
                    case 15:
        {
      ArrayList list = New15();
      Push(GoTo(6), list);
        }
        break;
                    case 16:
        {
      ArrayList list = New16();
      Push(GoTo(6), list);
        }
        break;
                    case 17:
        {
      ArrayList list = New17();
      Push(GoTo(7), list);
        }
        break;
                    case 18:
        {
      ArrayList list = New18();
      Push(GoTo(8), list);
        }
        break;
                    case 19:
        {
      ArrayList list = New19();
      Push(GoTo(9), list);
        }
        break;
                    case 20:
        {
      ArrayList list = New20();
      Push(GoTo(10), list);
        }
        break;
                    case 21:
        {
      ArrayList list = New21();
      Push(GoTo(10), list);
        }
        break;
                    case 22:
        {
      ArrayList list = New22();
      Push(GoTo(11), list);
        }
        break;
                    case 23:
        {
      ArrayList list = New23();
      Push(GoTo(11), list);
        }
        break;
                    case 24:
        {
      ArrayList list = New24();
      Push(GoTo(11), list);
        }
        break;
                    case 25:
        {
      ArrayList list = New25();
      Push(GoTo(11), list);
        }
        break;
                    case 26:
        {
      ArrayList list = New26();
      Push(GoTo(12), list);
        }
        break;
                    case 27:
        {
      ArrayList list = New27();
      Push(GoTo(12), list);
        }
        break;
                    case 28:
        {
      ArrayList list = New28();
      Push(GoTo(13), list);
        }
        break;
                    case 29:
        {
      ArrayList list = New29();
      Push(GoTo(13), list);
        }
        break;
                    case 30:
        {
      ArrayList list = New30();
      Push(GoTo(13), list);
        }
        break;
                    case 31:
        {
      ArrayList list = New31();
      Push(GoTo(13), list);
        }
        break;
                    case 32:
        {
      ArrayList list = New32();
      Push(GoTo(13), list);
        }
        break;
                    case 33:
        {
      ArrayList list = New33();
      Push(GoTo(14), list);
        }
        break;
                    case 34:
        {
      ArrayList list = New34();
      Push(GoTo(14), list);
        }
        break;
                    case 35:
        {
      ArrayList list = New35();
      Push(GoTo(15), list);
        }
        break;
                    case 36:
        {
      ArrayList list = New36();
      Push(GoTo(15), list);
        }
        break;
                    case 37:
        {
      ArrayList list = New37();
      Push(GoTo(16), list);
        }
        break;
                    case 38:
        {
      ArrayList list = New38();
      Push(GoTo(16), list);
        }
        break;
                    case 39:
        {
      ArrayList list = New39();
      Push(GoTo(16), list);
        }
        break;
                    case 40:
        {
      ArrayList list = New40();
      Push(GoTo(17), list);
        }
        break;
                    case 41:
        {
      ArrayList list = New41();
      Push(GoTo(18), list);
        }
        break;
                    case 42:
        {
      ArrayList list = New42();
      Push(GoTo(18), list);
        }
        break;
                    case 43:
        {
      ArrayList list = New43();
      Push(GoTo(18), list);
        }
        break;
                    case 44:
        {
      ArrayList list = New44();
      Push(GoTo(19), list);
        }
        break;
                    case 45:
        {
      ArrayList list = New45();
      Push(GoTo(20), list);
        }
        break;
                    case 46:
        {
      ArrayList list = New46();
      Push(GoTo(20), list);
        }
        break;
                    case 47:
        {
      ArrayList list = New47();
      Push(GoTo(21), list);
        }
        break;
                    case 48:
        {
      ArrayList list = New48();
      Push(GoTo(21), list);
        }
        break;
                    case 49:
        {
      ArrayList list = New49();
      Push(GoTo(22), list);
        }
        break;
                    case 50:
        {
      ArrayList list = New50();
      Push(GoTo(22), list);
        }
        break;
                    case 51:
        {
      ArrayList list = New51();
      Push(GoTo(22), list);
        }
        break;
                    case 52:
        {
      ArrayList list = New52();
      Push(GoTo(22), list);
        }
        break;
                    case 53:
        {
      ArrayList list = New53();
      Push(GoTo(22), list);
        }
        break;
                    case 54:
        {
      ArrayList list = New54();
      Push(GoTo(22), list);
        }
        break;
                    case 55:
        {
      ArrayList list = New55();
      Push(GoTo(23), list);
        }
        break;
                    case 56:
        {
      ArrayList list = New56();
      Push(GoTo(23), list);
        }
        break;
                    case 57:
        {
      ArrayList list = New57();
      Push(GoTo(23), list);
        }
        break;
                    case 58:
        {
      ArrayList list = New58();
      Push(GoTo(24), list);
        }
        break;
                    case 59:
        {
      ArrayList list = New59();
      Push(GoTo(24), list);
        }
        break;
                    case 60:
        {
      ArrayList list = New60();
      Push(GoTo(24), list);
        }
        break;
                    case 61:
        {
      ArrayList list = New61();
      Push(GoTo(25), list);
        }
        break;
                    case 62:
        {
      ArrayList list = New62();
      Push(GoTo(25), list);
        }
        break;
                    case 63:
        {
      ArrayList list = New63();
      Push(GoTo(25), list);
        }
        break;
                    case 64:
        {
      ArrayList list = New64();
      Push(GoTo(26), list);
        }
        break;
                    case 65:
        {
      ArrayList list = New65();
      Push(GoTo(26), list);
        }
        break;
                    case 66:
        {
      ArrayList list = New66();
      Push(GoTo(27), list);
        }
        break;
                    case 67:
        {
      ArrayList list = New67();
      Push(GoTo(27), list);
        }
        break;
                    case 68:
        {
      ArrayList list = New68();
      Push(GoTo(27), list);
        }
        break;
                    case 69:
        {
      ArrayList list = New69();
      Push(GoTo(27), list);
        }
        break;
                    case 70:
        {
      ArrayList list = New70();
      Push(GoTo(28), list);
        }
        break;
                    case 71:
        {
      ArrayList list = New71();
      Push(GoTo(28), list);
        }
        break;
                    case 72:
        {
      ArrayList list = New72();
      Push(GoTo(29), list);
        }
        break;
                    case 73:
        {
      ArrayList list = New73();
      Push(GoTo(29), list);
        }
        break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.Next();
                        PProg node1 = (PProg) ((ArrayList)Pop())[0];
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    ArrayList New0()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        TypedList listNode3 = new TypedList();
        PMainmethod pmainmethodNode4 = (PMainmethod)nodeArrayList1[0];
        AProg pprogNode1 = new AProg (
              listNode2,
              listNode3,
              pmainmethodNode4
        );
        nodeList.Add(pprogNode1);
        return nodeList;
    }
    ArrayList New1()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TypedList listNode4 = new TypedList();
        TypedList listNode2 = (TypedList)nodeArrayList1[0];
        if ( listNode2 != null )
        {
            listNode3.AddAll(listNode2);
        }
        PMainmethod pmainmethodNode5 = (PMainmethod)nodeArrayList2[0];
        AProg pprogNode1 = new AProg (
              listNode3,
              listNode4,
              pmainmethodNode5
        );
        nodeList.Add(pprogNode1);
        return nodeList;
    }
    ArrayList New2()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        TypedList listNode4 = new TypedList();
        TypedList listNode3 = (TypedList)nodeArrayList1[0];
        if ( listNode3 != null )
        {
            listNode4.AddAll(listNode3);
        }
        PMainmethod pmainmethodNode5 = (PMainmethod)nodeArrayList2[0];
        AProg pprogNode1 = new AProg (
              listNode2,
              listNode4,
              pmainmethodNode5
        );
        nodeList.Add(pprogNode1);
        return nodeList;
    }
    ArrayList New3()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TypedList listNode5 = new TypedList();
        TypedList listNode2 = (TypedList)nodeArrayList1[0];
        if ( listNode2 != null )
        {
            listNode3.AddAll(listNode2);
        }
        TypedList listNode4 = (TypedList)nodeArrayList2[0];
        if ( listNode4 != null )
        {
            listNode5.AddAll(listNode4);
        }
        PMainmethod pmainmethodNode6 = (PMainmethod)nodeArrayList3[0];
        AProg pprogNode1 = new AProg (
              listNode3,
              listNode5,
              pmainmethodNode6
        );
        nodeList.Add(pprogNode1);
        return nodeList;
    }
    ArrayList New4()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TMain tmainNode2 = (TMain)nodeArrayList1[0];
        TLparen tlparenNode3 = (TLparen)nodeArrayList2[0];
        TRparen trparenNode5 = (TRparen)nodeArrayList3[0];
        AMainmethod pmainmethodNode1 = new AMainmethod (
              tmainNode2,
              tlparenNode3,
              null,
              trparenNode5
        );
        nodeList.Add(pmainmethodNode1);
        return nodeList;
    }
    ArrayList New5()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TMain tmainNode2 = (TMain)nodeArrayList1[0];
        TLparen tlparenNode3 = (TLparen)nodeArrayList2[0];
        PStmts pstmtsNode4 = (PStmts)nodeArrayList3[0];
        TRparen trparenNode5 = (TRparen)nodeArrayList4[0];
        AMainmethod pmainmethodNode1 = new AMainmethod (
              tmainNode2,
              tlparenNode3,
              pstmtsNode4,
              trparenNode5
        );
        nodeList.Add(pmainmethodNode1);
        return nodeList;
    }
    ArrayList New6()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TConstant tconstantNode2 = (TConstant)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TId tidNode4 = (TId)nodeArrayList3[0];
        TAssign tassignNode5 = (TAssign)nodeArrayList4[0];
        PConstdec pconstdecNode6 = (PConstdec)nodeArrayList5[0];
        TEol teolNode7 = (TEol)nodeArrayList6[0];
        AConstantDeclarations pconstantdeclarationsNode1 = new AConstantDeclarations (
              tconstantNode2,
              tidNode3,
              tidNode4,
              tassignNode5,
              pconstdecNode6,
              teolNode7
        );
        nodeList.Add(pconstantdeclarationsNode1);
        return nodeList;
    }
    ArrayList New7()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr pexprNode2 = (PExpr)nodeArrayList1[0];
        AExpressionConstdec pconstdecNode1 = new AExpressionConstdec (
              pexprNode2
        );
        nodeList.Add(pconstdecNode1);
        return nodeList;
    }
    ArrayList New8()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TLparen tlparenNode3 = (TLparen)nodeArrayList2[0];
        PParameters pparametersNode4 = (PParameters)nodeArrayList3[0];
        TRparen trparenNode5 = (TRparen)nodeArrayList4[0];
        TLb tlbNode6 = (TLb)nodeArrayList5[0];
        TRb trbNode8 = (TRb)nodeArrayList6[0];
        AFunctionDeclarations pfunctiondeclarationsNode1 = new AFunctionDeclarations (
              tidNode2,
              tlparenNode3,
              pparametersNode4,
              trparenNode5,
              tlbNode6,
              null,
              trbNode8
        );
        nodeList.Add(pfunctiondeclarationsNode1);
        return nodeList;
    }
    ArrayList New9()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TLparen tlparenNode3 = (TLparen)nodeArrayList2[0];
        PParameters pparametersNode4 = (PParameters)nodeArrayList3[0];
        TRparen trparenNode5 = (TRparen)nodeArrayList4[0];
        TLb tlbNode6 = (TLb)nodeArrayList5[0];
        PStmts pstmtsNode7 = (PStmts)nodeArrayList6[0];
        TRb trbNode8 = (TRb)nodeArrayList7[0];
        AFunctionDeclarations pfunctiondeclarationsNode1 = new AFunctionDeclarations (
              tidNode2,
              tlparenNode3,
              pparametersNode4,
              trparenNode5,
              tlbNode6,
              pstmtsNode7,
              trbNode8
        );
        nodeList.Add(pfunctiondeclarationsNode1);
        return nodeList;
    }
    ArrayList New10()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PStmt pstmtNode2 = (PStmt)nodeArrayList1[0];
        PStmts pstmtsNode3 = (PStmts)nodeArrayList2[0];
        AMultipleStmts pstmtsNode1 = new AMultipleStmts (
              pstmtNode2,
              pstmtsNode3
        );
        nodeList.Add(pstmtsNode1);
        return nodeList;
    }
    ArrayList New11()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PStmt pstmtNode2 = (PStmt)nodeArrayList1[0];
        ASingleStmts pstmtsNode1 = new ASingleStmts (
              pstmtNode2
        );
        nodeList.Add(pstmtsNode1);
        return nodeList;
    }
    ArrayList New12()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAssignstmt passignstmtNode2 = (PAssignstmt)nodeArrayList1[0];
        AAssignStmt pstmtNode1 = new AAssignStmt (
              passignstmtNode2
        );
        nodeList.Add(pstmtNode1);
        return nodeList;
    }
    ArrayList New13()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDeclarestmt pdeclarestmtNode2 = (PDeclarestmt)nodeArrayList1[0];
        ADeclStmt pstmtNode1 = new ADeclStmt (
              pdeclarestmtNode2
        );
        nodeList.Add(pstmtNode1);
        return nodeList;
    }
    ArrayList New14()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PFunctioncall pfunctioncallNode2 = (PFunctioncall)nodeArrayList1[0];
        AFcStmt pstmtNode1 = new AFcStmt (
              pfunctioncallNode2
        );
        nodeList.Add(pstmtNode1);
        return nodeList;
    }
    ArrayList New15()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PLogicwhile plogicwhileNode2 = (PLogicwhile)nodeArrayList1[0];
        AWhileStmt pstmtNode1 = new AWhileStmt (
              plogicwhileNode2
        );
        nodeList.Add(pstmtNode1);
        return nodeList;
    }
    ArrayList New16()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PLogicif plogicifNode2 = (PLogicif)nodeArrayList1[0];
        AIfelseStmt pstmtNode1 = new AIfelseStmt (
              plogicifNode2
        );
        nodeList.Add(pstmtNode1);
        return nodeList;
    }
    ArrayList New17()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TAssign tassignNode3 = (TAssign)nodeArrayList2[0];
        PExpr pexprNode4 = (PExpr)nodeArrayList3[0];
        TEol teolNode5 = (TEol)nodeArrayList4[0];
        AAssignstmt passignstmtNode1 = new AAssignstmt (
              tidNode2,
              tassignNode3,
              pexprNode4,
              teolNode5
        );
        nodeList.Add(passignstmtNode1);
        return nodeList;
    }
    ArrayList New18()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TEol teolNode4 = (TEol)nodeArrayList3[0];
        ADeclarestmt pdeclarestmtNode1 = new ADeclarestmt (
              tidNode2,
              tidNode3,
              teolNode4
        );
        nodeList.Add(pdeclarestmtNode1);
        return nodeList;
    }
    ArrayList New19()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TLparen tlparenNode3 = (TLparen)nodeArrayList2[0];
        PArguments pargumentsNode4 = (PArguments)nodeArrayList3[0];
        TRparen trparenNode5 = (TRparen)nodeArrayList4[0];
        TEol teolNode6 = (TEol)nodeArrayList5[0];
        AFunctioncall pfunctioncallNode1 = new AFunctioncall (
              tidNode2,
              tlparenNode3,
              pargumentsNode4,
              trparenNode5,
              teolNode6
        );
        nodeList.Add(pfunctioncallNode1);
        return nodeList;
    }
    ArrayList New20()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TWhile twhileNode2 = (TWhile)nodeArrayList1[0];
        TLparen tlparenNode3 = (TLparen)nodeArrayList2[0];
        PBoolexp pboolexpNode4 = (PBoolexp)nodeArrayList3[0];
        TRparen trparenNode5 = (TRparen)nodeArrayList4[0];
        TLb tlbNode6 = (TLb)nodeArrayList5[0];
        TRb trbNode8 = (TRb)nodeArrayList6[0];
        ALogicwhile plogicwhileNode1 = new ALogicwhile (
              twhileNode2,
              tlparenNode3,
              pboolexpNode4,
              trparenNode5,
              tlbNode6,
              null,
              trbNode8
        );
        nodeList.Add(plogicwhileNode1);
        return nodeList;
    }
    ArrayList New21()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TWhile twhileNode2 = (TWhile)nodeArrayList1[0];
        TLparen tlparenNode3 = (TLparen)nodeArrayList2[0];
        PBoolexp pboolexpNode4 = (PBoolexp)nodeArrayList3[0];
        TRparen trparenNode5 = (TRparen)nodeArrayList4[0];
        TLb tlbNode6 = (TLb)nodeArrayList5[0];
        PStmts pstmtsNode7 = (PStmts)nodeArrayList6[0];
        TRb trbNode8 = (TRb)nodeArrayList7[0];
        ALogicwhile plogicwhileNode1 = new ALogicwhile (
              twhileNode2,
              tlparenNode3,
              pboolexpNode4,
              trparenNode5,
              tlbNode6,
              pstmtsNode7,
              trbNode8
        );
        nodeList.Add(plogicwhileNode1);
        return nodeList;
    }
    ArrayList New22()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TIf tifNode2 = (TIf)nodeArrayList1[0];
        TLparen tlparenNode3 = (TLparen)nodeArrayList2[0];
        PBoolexp pboolexpNode4 = (PBoolexp)nodeArrayList3[0];
        TRparen trparenNode5 = (TRparen)nodeArrayList4[0];
        TLb tlbNode6 = (TLb)nodeArrayList5[0];
        TRb trbNode8 = (TRb)nodeArrayList6[0];
        ALogicif plogicifNode1 = new ALogicif (
              tifNode2,
              tlparenNode3,
              pboolexpNode4,
              trparenNode5,
              tlbNode6,
              null,
              trbNode8,
              null
        );
        nodeList.Add(plogicifNode1);
        return nodeList;
    }
    ArrayList New23()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TIf tifNode2 = (TIf)nodeArrayList1[0];
        TLparen tlparenNode3 = (TLparen)nodeArrayList2[0];
        PBoolexp pboolexpNode4 = (PBoolexp)nodeArrayList3[0];
        TRparen trparenNode5 = (TRparen)nodeArrayList4[0];
        TLb tlbNode6 = (TLb)nodeArrayList5[0];
        PStmts pstmtsNode7 = (PStmts)nodeArrayList6[0];
        TRb trbNode8 = (TRb)nodeArrayList7[0];
        ALogicif plogicifNode1 = new ALogicif (
              tifNode2,
              tlparenNode3,
              pboolexpNode4,
              trparenNode5,
              tlbNode6,
              pstmtsNode7,
              trbNode8,
              null
        );
        nodeList.Add(plogicifNode1);
        return nodeList;
    }
    ArrayList New24()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TIf tifNode2 = (TIf)nodeArrayList1[0];
        TLparen tlparenNode3 = (TLparen)nodeArrayList2[0];
        PBoolexp pboolexpNode4 = (PBoolexp)nodeArrayList3[0];
        TRparen trparenNode5 = (TRparen)nodeArrayList4[0];
        TLb tlbNode6 = (TLb)nodeArrayList5[0];
        TRb trbNode8 = (TRb)nodeArrayList6[0];
        PLogicelse plogicelseNode9 = (PLogicelse)nodeArrayList7[0];
        ALogicif plogicifNode1 = new ALogicif (
              tifNode2,
              tlparenNode3,
              pboolexpNode4,
              trparenNode5,
              tlbNode6,
              null,
              trbNode8,
              plogicelseNode9
        );
        nodeList.Add(plogicifNode1);
        return nodeList;
    }
    ArrayList New25()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TIf tifNode2 = (TIf)nodeArrayList1[0];
        TLparen tlparenNode3 = (TLparen)nodeArrayList2[0];
        PBoolexp pboolexpNode4 = (PBoolexp)nodeArrayList3[0];
        TRparen trparenNode5 = (TRparen)nodeArrayList4[0];
        TLb tlbNode6 = (TLb)nodeArrayList5[0];
        PStmts pstmtsNode7 = (PStmts)nodeArrayList6[0];
        TRb trbNode8 = (TRb)nodeArrayList7[0];
        PLogicelse plogicelseNode9 = (PLogicelse)nodeArrayList8[0];
        ALogicif plogicifNode1 = new ALogicif (
              tifNode2,
              tlparenNode3,
              pboolexpNode4,
              trparenNode5,
              tlbNode6,
              pstmtsNode7,
              trbNode8,
              plogicelseNode9
        );
        nodeList.Add(plogicifNode1);
        return nodeList;
    }
    ArrayList New26()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TElse telseNode2 = (TElse)nodeArrayList1[0];
        TLb tlbNode3 = (TLb)nodeArrayList2[0];
        TRb trbNode5 = (TRb)nodeArrayList3[0];
        ALogicelse plogicelseNode1 = new ALogicelse (
              telseNode2,
              tlbNode3,
              null,
              trbNode5
        );
        nodeList.Add(plogicelseNode1);
        return nodeList;
    }
    ArrayList New27()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TElse telseNode2 = (TElse)nodeArrayList1[0];
        TLb tlbNode3 = (TLb)nodeArrayList2[0];
        PStmts pstmtsNode4 = (PStmts)nodeArrayList3[0];
        TRb trbNode5 = (TRb)nodeArrayList4[0];
        ALogicelse plogicelseNode1 = new ALogicelse (
              telseNode2,
              tlbNode3,
              pstmtsNode4,
              trbNode5
        );
        nodeList.Add(plogicelseNode1);
        return nodeList;
    }
    ArrayList New28()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TEquals tequalsNode2 = (TEquals)nodeArrayList1[0];
        AEqualsLogiccomp plogiccompNode1 = new AEqualsLogiccomp (
              tequalsNode2
        );
        nodeList.Add(plogiccompNode1);
        return nodeList;
    }
    ArrayList New29()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLt tltNode2 = (TLt)nodeArrayList1[0];
        ALtLogiccomp plogiccompNode1 = new ALtLogiccomp (
              tltNode2
        );
        nodeList.Add(plogiccompNode1);
        return nodeList;
    }
    ArrayList New30()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLte tlteNode2 = (TLte)nodeArrayList1[0];
        ALteLogiccomp plogiccompNode1 = new ALteLogiccomp (
              tlteNode2
        );
        nodeList.Add(plogiccompNode1);
        return nodeList;
    }
    ArrayList New31()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TGt tgtNode2 = (TGt)nodeArrayList1[0];
        AGtLogiccomp plogiccompNode1 = new AGtLogiccomp (
              tgtNode2
        );
        nodeList.Add(plogiccompNode1);
        return nodeList;
    }
    ArrayList New32()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TGte tgteNode2 = (TGte)nodeArrayList1[0];
        AGteLogiccomp plogiccompNode1 = new AGteLogiccomp (
              tgteNode2
        );
        nodeList.Add(plogiccompNode1);
        return nodeList;
    }
    ArrayList New33()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PCompexpr pcompexprNode2 = (PCompexpr)nodeArrayList1[0];
        PBooltools pbooltoolsNode3 = (PBooltools)nodeArrayList2[0];
        PCompexpr pcompexprNode4 = (PCompexpr)nodeArrayList3[0];
        AMultipleBoolexp pboolexpNode1 = new AMultipleBoolexp (
              pcompexprNode2,
              pbooltoolsNode3,
              pcompexprNode4
        );
        nodeList.Add(pboolexpNode1);
        return nodeList;
    }
    ArrayList New34()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PCompexpr pcompexprNode2 = (PCompexpr)nodeArrayList1[0];
        ASingleBoolexp pboolexpNode1 = new ASingleBoolexp (
              pcompexprNode2
        );
        nodeList.Add(pboolexpNode1);
        return nodeList;
    }
    ArrayList New35()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TAnd tandNode2 = (TAnd)nodeArrayList1[0];
        AAndBooltools pbooltoolsNode1 = new AAndBooltools (
              tandNode2
        );
        nodeList.Add(pbooltoolsNode1);
        return nodeList;
    }
    ArrayList New36()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TOr torNode2 = (TOr)nodeArrayList1[0];
        AOrBooltools pbooltoolsNode1 = new AOrBooltools (
              torNode2
        );
        nodeList.Add(pbooltoolsNode1);
        return nodeList;
    }
    ArrayList New37()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PParameter pparameterNode2 = (PParameter)nodeArrayList1[0];
        ASingleParameters pparametersNode1 = new ASingleParameters (
              pparameterNode2
        );
        nodeList.Add(pparametersNode1);
        return nodeList;
    }
    ArrayList New38()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PParameter pparameterNode2 = (PParameter)nodeArrayList1[0];
        TComma tcommaNode3 = (TComma)nodeArrayList2[0];
        PParameters pparametersNode4 = (PParameters)nodeArrayList3[0];
        AMultipleParameters pparametersNode1 = new AMultipleParameters (
              pparameterNode2,
              tcommaNode3,
              pparametersNode4
        );
        nodeList.Add(pparametersNode1);
        return nodeList;
    }
    ArrayList New39()
    {
        ArrayList nodeList = new ArrayList();
        ANoneParameters pparametersNode1 = new ANoneParameters (
        );
        nodeList.Add(pparametersNode1);
        return nodeList;
    }
    ArrayList New40()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        AParameterParameter pparameterNode1 = new AParameterParameter (
              tidNode2,
              tidNode3
        );
        nodeList.Add(pparameterNode1);
        return nodeList;
    }
    ArrayList New41()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PArgument pargumentNode2 = (PArgument)nodeArrayList1[0];
        ASingleArguments pargumentsNode1 = new ASingleArguments (
              pargumentNode2
        );
        nodeList.Add(pargumentsNode1);
        return nodeList;
    }
    ArrayList New42()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PArgument pargumentNode2 = (PArgument)nodeArrayList1[0];
        TComma tcommaNode3 = (TComma)nodeArrayList2[0];
        PArguments pargumentsNode4 = (PArguments)nodeArrayList3[0];
        AMultipleArguments pargumentsNode1 = new AMultipleArguments (
              pargumentNode2,
              tcommaNode3,
              pargumentsNode4
        );
        nodeList.Add(pargumentsNode1);
        return nodeList;
    }
    ArrayList New43()
    {
        ArrayList nodeList = new ArrayList();
        ANoneArguments pargumentsNode1 = new ANoneArguments (
        );
        nodeList.Add(pargumentsNode1);
        return nodeList;
    }
    ArrayList New44()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr pexprNode2 = (PExpr)nodeArrayList1[0];
        AArgument pargumentNode1 = new AArgument (
              pexprNode2
        );
        nodeList.Add(pargumentNode1);
        return nodeList;
    }
    ArrayList New45()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        POrexpr porexprNode2 = (POrexpr)nodeArrayList1[0];
        TOr torNode3 = (TOr)nodeArrayList2[0];
        PAndexpr pandexprNode4 = (PAndexpr)nodeArrayList3[0];
        AOrOrexpr porexprNode1 = new AOrOrexpr (
              porexprNode2,
              torNode3,
              pandexprNode4
        );
        nodeList.Add(porexprNode1);
        return nodeList;
    }
    ArrayList New46()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAndexpr pandexprNode2 = (PAndexpr)nodeArrayList1[0];
        APassOrexpr porexprNode1 = new APassOrexpr (
              pandexprNode2
        );
        nodeList.Add(porexprNode1);
        return nodeList;
    }
    ArrayList New47()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAndexpr pandexprNode2 = (PAndexpr)nodeArrayList1[0];
        TAnd tandNode3 = (TAnd)nodeArrayList2[0];
        PCompexpr pcompexprNode4 = (PCompexpr)nodeArrayList3[0];
        AAndAndexpr pandexprNode1 = new AAndAndexpr (
              pandexprNode2,
              tandNode3,
              pcompexprNode4
        );
        nodeList.Add(pandexprNode1);
        return nodeList;
    }
    ArrayList New48()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PCompexpr pcompexprNode2 = (PCompexpr)nodeArrayList1[0];
        APassAndexpr pandexprNode1 = new APassAndexpr (
              pcompexprNode2
        );
        nodeList.Add(pandexprNode1);
        return nodeList;
    }
    ArrayList New49()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr pexprNode2 = (PExpr)nodeArrayList1[0];
        TLt tltNode3 = (TLt)nodeArrayList2[0];
        PExpr pexprNode4 = (PExpr)nodeArrayList3[0];
        ALessthanCompexpr pcompexprNode1 = new ALessthanCompexpr (
              pexprNode2,
              tltNode3,
              pexprNode4
        );
        nodeList.Add(pcompexprNode1);
        return nodeList;
    }
    ArrayList New50()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr pexprNode2 = (PExpr)nodeArrayList1[0];
        TLte tlteNode3 = (TLte)nodeArrayList2[0];
        PExpr pexprNode4 = (PExpr)nodeArrayList3[0];
        ALessthaneCompexpr pcompexprNode1 = new ALessthaneCompexpr (
              pexprNode2,
              tlteNode3,
              pexprNode4
        );
        nodeList.Add(pcompexprNode1);
        return nodeList;
    }
    ArrayList New51()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr pexprNode2 = (PExpr)nodeArrayList1[0];
        TGt tgtNode3 = (TGt)nodeArrayList2[0];
        PExpr pexprNode4 = (PExpr)nodeArrayList3[0];
        AGreatthanCompexpr pcompexprNode1 = new AGreatthanCompexpr (
              pexprNode2,
              tgtNode3,
              pexprNode4
        );
        nodeList.Add(pcompexprNode1);
        return nodeList;
    }
    ArrayList New52()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr pexprNode2 = (PExpr)nodeArrayList1[0];
        TGte tgteNode3 = (TGte)nodeArrayList2[0];
        PExpr pexprNode4 = (PExpr)nodeArrayList3[0];
        AGreatthaneCompexpr pcompexprNode1 = new AGreatthaneCompexpr (
              pexprNode2,
              tgteNode3,
              pexprNode4
        );
        nodeList.Add(pcompexprNode1);
        return nodeList;
    }
    ArrayList New53()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr pexprNode2 = (PExpr)nodeArrayList1[0];
        TEquals tequalsNode3 = (TEquals)nodeArrayList2[0];
        PExpr pexprNode4 = (PExpr)nodeArrayList3[0];
        AEqualCompexpr pcompexprNode1 = new AEqualCompexpr (
              pexprNode2,
              tequalsNode3,
              pexprNode4
        );
        nodeList.Add(pcompexprNode1);
        return nodeList;
    }
    ArrayList New54()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr pexprNode2 = (PExpr)nodeArrayList1[0];
        APassCompexpr pcompexprNode1 = new APassCompexpr (
              pexprNode2
        );
        nodeList.Add(pcompexprNode1);
        return nodeList;
    }
    ArrayList New55()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr pexprNode2 = (PExpr)nodeArrayList1[0];
        TPlus tplusNode3 = (TPlus)nodeArrayList2[0];
        PExpr2 pexpr2Node4 = (PExpr2)nodeArrayList3[0];
        APlusExpr pexprNode1 = new APlusExpr (
              pexprNode2,
              tplusNode3,
              pexpr2Node4
        );
        nodeList.Add(pexprNode1);
        return nodeList;
    }
    ArrayList New56()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr pexprNode2 = (PExpr)nodeArrayList1[0];
        TSubtract tsubtractNode3 = (TSubtract)nodeArrayList2[0];
        PExpr2 pexpr2Node4 = (PExpr2)nodeArrayList3[0];
        ASubtractExpr pexprNode1 = new ASubtractExpr (
              pexprNode2,
              tsubtractNode3,
              pexpr2Node4
        );
        nodeList.Add(pexprNode1);
        return nodeList;
    }
    ArrayList New57()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr2 pexpr2Node2 = (PExpr2)nodeArrayList1[0];
        APassExpr pexprNode1 = new APassExpr (
              pexpr2Node2
        );
        nodeList.Add(pexprNode1);
        return nodeList;
    }
    ArrayList New58()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr2 pexpr2Node2 = (PExpr2)nodeArrayList1[0];
        TMult tmultNode3 = (TMult)nodeArrayList2[0];
        POperand poperandNode4 = (POperand)nodeArrayList3[0];
        AMultExpr2 pexpr2Node1 = new AMultExpr2 (
              pexpr2Node2,
              tmultNode3,
              poperandNode4
        );
        nodeList.Add(pexpr2Node1);
        return nodeList;
    }
    ArrayList New59()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpr2 pexpr2Node2 = (PExpr2)nodeArrayList1[0];
        TDivide tdivideNode3 = (TDivide)nodeArrayList2[0];
        POperand poperandNode4 = (POperand)nodeArrayList3[0];
        ADivideExpr2 pexpr2Node1 = new ADivideExpr2 (
              pexpr2Node2,
              tdivideNode3,
              poperandNode4
        );
        nodeList.Add(pexpr2Node1);
        return nodeList;
    }
    ArrayList New60()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PUniary puniaryNode2 = (PUniary)nodeArrayList1[0];
        APassExpr2 pexpr2Node1 = new APassExpr2 (
              puniaryNode2
        );
        nodeList.Add(pexpr2Node1);
        return nodeList;
    }
    ArrayList New61()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TSubtract tsubtractNode2 = (TSubtract)nodeArrayList1[0];
        PPriority ppriorityNode3 = (PPriority)nodeArrayList2[0];
        ANegUniary puniaryNode1 = new ANegUniary (
              tsubtractNode2,
              ppriorityNode3
        );
        nodeList.Add(puniaryNode1);
        return nodeList;
    }
    ArrayList New62()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TNot tnotNode2 = (TNot)nodeArrayList1[0];
        PPriority ppriorityNode3 = (PPriority)nodeArrayList2[0];
        ANotUniary puniaryNode1 = new ANotUniary (
              tnotNode2,
              ppriorityNode3
        );
        nodeList.Add(puniaryNode1);
        return nodeList;
    }
    ArrayList New63()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PPriority ppriorityNode2 = (PPriority)nodeArrayList1[0];
        AYesUniary puniaryNode1 = new AYesUniary (
              ppriorityNode2
        );
        nodeList.Add(puniaryNode1);
        return nodeList;
    }
    ArrayList New64()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLparen tlparenNode2 = (TLparen)nodeArrayList1[0];
        POrexpr porexprNode3 = (POrexpr)nodeArrayList2[0];
        TRparen trparenNode4 = (TRparen)nodeArrayList3[0];
        AParensPriority ppriorityNode1 = new AParensPriority (
              tlparenNode2,
              porexprNode3,
              trparenNode4
        );
        nodeList.Add(ppriorityNode1);
        return nodeList;
    }
    ArrayList New65()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        POperand poperandNode2 = (POperand)nodeArrayList1[0];
        AOperPriority ppriorityNode1 = new AOperPriority (
              poperandNode2
        );
        nodeList.Add(ppriorityNode1);
        return nodeList;
    }
    ArrayList New66()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TInteger tintegerNode2 = (TInteger)nodeArrayList1[0];
        AIntOperand poperandNode1 = new AIntOperand (
              tintegerNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New67()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        AVariableOperand poperandNode1 = new AVariableOperand (
              tidNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New68()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TFloat tfloatNode2 = (TFloat)nodeArrayList1[0];
        AFloatOperand poperandNode1 = new AFloatOperand (
              tfloatNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New69()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TString tstringNode2 = (TString)nodeArrayList1[0];
        AStringOperand poperandNode1 = new AStringOperand (
              tstringNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New70()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        PConstantDeclarations pconstantdeclarationsNode1 = (PConstantDeclarations)nodeArrayList1[0];
        if ( pconstantdeclarationsNode1 != null )
        {
            listNode2.Add(pconstantdeclarationsNode1);
        }
        nodeList.Add(listNode2);
        return nodeList;
    }
    ArrayList New71()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TypedList listNode1 = (TypedList)nodeArrayList1[0];
        PConstantDeclarations pconstantdeclarationsNode2 = (PConstantDeclarations)nodeArrayList2[0];
        if ( listNode1 != null )
        {
            listNode3.AddAll(listNode1);
        }
        if ( pconstantdeclarationsNode2 != null )
        {
            listNode3.Add(pconstantdeclarationsNode2);
        }
        nodeList.Add(listNode3);
        return nodeList;
    }
    ArrayList New72()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode2 = new TypedList();
        PFunctionDeclarations pfunctiondeclarationsNode1 = (PFunctionDeclarations)nodeArrayList1[0];
        if ( pfunctiondeclarationsNode1 != null )
        {
            listNode2.Add(pfunctiondeclarationsNode1);
        }
        nodeList.Add(listNode2);
        return nodeList;
    }
    ArrayList New73()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TypedList listNode3 = new TypedList();
        TypedList listNode1 = (TypedList)nodeArrayList1[0];
        PFunctionDeclarations pfunctiondeclarationsNode2 = (PFunctionDeclarations)nodeArrayList2[0];
        if ( listNode1 != null )
        {
            listNode3.AddAll(listNode1);
        }
        if ( pfunctiondeclarationsNode2 != null )
        {
            listNode3.Add(pfunctiondeclarationsNode2);
        }
        nodeList.Add(listNode3);
        return nodeList;
    }

    private static int[][][] actionTable = {
      new int[][] {
        new int[] {-1, 3, 0},
        new int[] {23, 0, 1},
        new int[] {25, 0, 2},
        new int[] {26, 0, 3},
      },
      new int[][] {
        new int[] {-1, 3, 1},
        new int[] {6, 0, 10},
      },
      new int[][] {
        new int[] {-1, 3, 2},
        new int[] {26, 0, 11},
      },
      new int[][] {
        new int[] {-1, 3, 3},
        new int[] {6, 0, 12},
      },
      new int[][] {
        new int[] {-1, 3, 4},
        new int[] {30, 2, -1},
      },
      new int[][] {
        new int[] {-1, 1, 0},
      },
      new int[][] {
        new int[] {-1, 1, 70},
      },
      new int[][] {
        new int[] {-1, 1, 72},
      },
      new int[][] {
        new int[] {-1, 3, 8},
        new int[] {23, 0, 1},
        new int[] {25, 0, 2},
        new int[] {26, 0, 3},
      },
      new int[][] {
        new int[] {-1, 3, 9},
        new int[] {23, 0, 1},
        new int[] {26, 0, 3},
      },
      new int[][] {
        new int[] {-1, 3, 10},
        new int[] {7, 0, 18},
        new int[] {20, 0, 19},
        new int[] {22, 0, 20},
        new int[] {26, 0, 21},
      },
      new int[][] {
        new int[] {-1, 3, 11},
        new int[] {26, 0, 29},
      },
      new int[][] {
        new int[] {-1, 1, 39},
        new int[] {26, 0, 30},
      },
      new int[][] {
        new int[] {-1, 1, 1},
      },
      new int[][] {
        new int[] {-1, 1, 71},
      },
      new int[][] {
        new int[] {-1, 3, 15},
        new int[] {23, 0, 1},
        new int[] {26, 0, 3},
      },
      new int[][] {
        new int[] {-1, 1, 2},
      },
      new int[][] {
        new int[] {-1, 1, 73},
      },
      new int[][] {
        new int[] {-1, 1, 4},
      },
      new int[][] {
        new int[] {-1, 3, 19},
        new int[] {6, 0, 34},
      },
      new int[][] {
        new int[] {-1, 3, 20},
        new int[] {6, 0, 35},
      },
      new int[][] {
        new int[] {-1, 3, 21},
        new int[] {2, 0, 36},
        new int[] {6, 0, 37},
        new int[] {26, 0, 38},
      },
      new int[][] {
        new int[] {-1, 3, 22},
        new int[] {7, 0, 39},
      },
      new int[][] {
        new int[] {-1, 1, 11},
        new int[] {20, 0, 19},
        new int[] {22, 0, 20},
        new int[] {26, 0, 21},
      },
      new int[][] {
        new int[] {-1, 1, 12},
      },
      new int[][] {
        new int[] {-1, 1, 13},
      },
      new int[][] {
        new int[] {-1, 1, 14},
      },
      new int[][] {
        new int[] {-1, 1, 15},
      },
      new int[][] {
        new int[] {-1, 1, 16},
      },
      new int[][] {
        new int[] {-1, 3, 29},
        new int[] {2, 0, 41},
      },
      new int[][] {
        new int[] {-1, 3, 30},
        new int[] {26, 0, 42},
      },
      new int[][] {
        new int[] {-1, 3, 31},
        new int[] {7, 0, 43},
      },
      new int[][] {
        new int[] {-1, 1, 37},
        new int[] {18, 0, 44},
      },
      new int[][] {
        new int[] {-1, 1, 3},
      },
      new int[][] {
        new int[] {-1, 3, 34},
        new int[] {5, 0, 45},
        new int[] {6, 0, 46},
        new int[] {16, 0, 47},
        new int[] {26, 0, 48},
        new int[] {27, 0, 49},
        new int[] {28, 0, 50},
        new int[] {29, 0, 51},
      },
      new int[][] {
        new int[] {-1, 3, 35},
        new int[] {5, 0, 45},
        new int[] {6, 0, 46},
        new int[] {16, 0, 47},
        new int[] {26, 0, 48},
        new int[] {27, 0, 49},
        new int[] {28, 0, 50},
        new int[] {29, 0, 51},
      },
      new int[][] {
        new int[] {-1, 3, 36},
        new int[] {5, 0, 45},
        new int[] {6, 0, 46},
        new int[] {16, 0, 47},
        new int[] {26, 0, 48},
        new int[] {27, 0, 49},
        new int[] {28, 0, 50},
        new int[] {29, 0, 51},
      },
      new int[][] {
        new int[] {-1, 1, 43},
        new int[] {5, 0, 45},
        new int[] {6, 0, 46},
        new int[] {16, 0, 47},
        new int[] {26, 0, 48},
        new int[] {27, 0, 49},
        new int[] {28, 0, 50},
        new int[] {29, 0, 51},
      },
      new int[][] {
        new int[] {-1, 3, 38},
        new int[] {3, 0, 64},
      },
      new int[][] {
        new int[] {-1, 1, 5},
      },
      new int[][] {
        new int[] {-1, 1, 10},
      },
      new int[][] {
        new int[] {-1, 3, 41},
        new int[] {5, 0, 45},
        new int[] {6, 0, 46},
        new int[] {16, 0, 47},
        new int[] {26, 0, 48},
        new int[] {27, 0, 49},
        new int[] {28, 0, 50},
        new int[] {29, 0, 51},
      },
      new int[][] {
        new int[] {-1, 1, 40},
      },
      new int[][] {
        new int[] {-1, 3, 43},
        new int[] {8, 0, 67},
      },
      new int[][] {
        new int[] {-1, 1, 39},
        new int[] {26, 0, 30},
      },
      new int[][] {
        new int[] {-1, 3, 45},
        new int[] {6, 0, 46},
        new int[] {26, 0, 48},
        new int[] {27, 0, 49},
        new int[] {28, 0, 50},
        new int[] {29, 0, 51},
      },
      new int[][] {
        new int[] {-1, 3, 46},
        new int[] {5, 0, 45},
        new int[] {6, 0, 46},
        new int[] {16, 0, 47},
        new int[] {26, 0, 48},
        new int[] {27, 0, 49},
        new int[] {28, 0, 50},
        new int[] {29, 0, 51},
      },
      new int[][] {
        new int[] {-1, 3, 47},
        new int[] {6, 0, 46},
        new int[] {26, 0, 48},
        new int[] {27, 0, 49},
        new int[] {28, 0, 50},
        new int[] {29, 0, 51},
      },
      new int[][] {
        new int[] {-1, 1, 67},
      },
      new int[][] {
        new int[] {-1, 1, 66},
      },
      new int[][] {
        new int[] {-1, 1, 68},
      },
      new int[][] {
        new int[] {-1, 1, 69},
      },
      new int[][] {
        new int[] {-1, 3, 52},
        new int[] {7, 0, 74},
      },
      new int[][] {
        new int[] {-1, 1, 34},
        new int[] {14, 0, 75},
        new int[] {15, 0, 76},
      },
      new int[][] {
        new int[] {-1, 1, 54},
        new int[] {0, 0, 78},
        new int[] {5, 0, 79},
        new int[] {10, 0, 80},
        new int[] {11, 0, 81},
        new int[] {12, 0, 82},
        new int[] {13, 0, 83},
        new int[] {17, 0, 84},
      },
      new int[][] {
        new int[] {-1, 1, 57},
        new int[] {1, 0, 85},
        new int[] {4, 0, 86},
      },
      new int[][] {
        new int[] {-1, 1, 60},
      },
      new int[][] {
        new int[] {-1, 1, 63},
      },
      new int[][] {
        new int[] {-1, 1, 65},
      },
      new int[][] {
        new int[] {-1, 3, 59},
        new int[] {7, 0, 87},
      },
      new int[][] {
        new int[] {-1, 3, 60},
        new int[] {0, 0, 78},
        new int[] {3, 0, 88},
        new int[] {5, 0, 79},
      },
      new int[][] {
        new int[] {-1, 3, 61},
        new int[] {7, 0, 89},
      },
      new int[][] {
        new int[] {-1, 1, 41},
        new int[] {18, 0, 90},
      },
      new int[][] {
        new int[] {-1, 1, 44},
        new int[] {0, 0, 78},
        new int[] {5, 0, 79},
      },
      new int[][] {
        new int[] {-1, 1, 18},
      },
      new int[][] {
        new int[] {-1, 3, 65},
        new int[] {3, 0, 91},
      },
      new int[][] {
        new int[] {-1, 1, 7},
        new int[] {0, 0, 78},
        new int[] {5, 0, 79},
      },
      new int[][] {
        new int[] {-1, 3, 67},
        new int[] {9, 0, 92},
        new int[] {20, 0, 19},
        new int[] {22, 0, 20},
        new int[] {26, 0, 21},
      },
      new int[][] {
        new int[] {-1, 1, 38},
      },
      new int[][] {
        new int[] {-1, 1, 61},
      },
      new int[][] {
        new int[] {-1, 3, 70},
        new int[] {7, 0, 94},
        new int[] {15, 0, 95},
      },
      new int[][] {
        new int[] {-1, 1, 46},
        new int[] {14, 0, 96},
      },
      new int[][] {
        new int[] {-1, 1, 48},
      },
      new int[][] {
        new int[] {-1, 1, 62},
      },
      new int[][] {
        new int[] {-1, 3, 74},
        new int[] {8, 0, 97},
      },
      new int[][] {
        new int[] {-1, 1, 35},
      },
      new int[][] {
        new int[] {-1, 1, 36},
      },
      new int[][] {
        new int[] {-1, 3, 77},
        new int[] {5, 0, 45},
        new int[] {6, 0, 46},
        new int[] {16, 0, 47},
        new int[] {26, 0, 48},
        new int[] {27, 0, 49},
        new int[] {28, 0, 50},
        new int[] {29, 0, 51},
      },
      new int[][] {
        new int[] {-1, 3, 78},
        new int[] {5, 0, 45},
        new int[] {6, 0, 46},
        new int[] {16, 0, 47},
        new int[] {26, 0, 48},
        new int[] {27, 0, 49},
        new int[] {28, 0, 50},
        new int[] {29, 0, 51},
      },
      new int[][] {
        new int[] {-1, 3, 79},
        new int[] {5, 0, 45},
        new int[] {6, 0, 46},
        new int[] {16, 0, 47},
        new int[] {26, 0, 48},
        new int[] {27, 0, 49},
        new int[] {28, 0, 50},
        new int[] {29, 0, 51},
      },
      new int[][] {
        new int[] {-1, 3, 80},
        new int[] {5, 0, 45},
        new int[] {6, 0, 46},
        new int[] {16, 0, 47},
        new int[] {26, 0, 48},
        new int[] {27, 0, 49},
        new int[] {28, 0, 50},
        new int[] {29, 0, 51},
      },
      new int[][] {
        new int[] {-1, 3, 81},
        new int[] {5, 0, 45},
        new int[] {6, 0, 46},
        new int[] {16, 0, 47},
        new int[] {26, 0, 48},
        new int[] {27, 0, 49},
        new int[] {28, 0, 50},
        new int[] {29, 0, 51},
      },
      new int[][] {
        new int[] {-1, 3, 82},
        new int[] {5, 0, 45},
        new int[] {6, 0, 46},
        new int[] {16, 0, 47},
        new int[] {26, 0, 48},
        new int[] {27, 0, 49},
        new int[] {28, 0, 50},
        new int[] {29, 0, 51},
      },
      new int[][] {
        new int[] {-1, 3, 83},
        new int[] {5, 0, 45},
        new int[] {6, 0, 46},
        new int[] {16, 0, 47},
        new int[] {26, 0, 48},
        new int[] {27, 0, 49},
        new int[] {28, 0, 50},
        new int[] {29, 0, 51},
      },
      new int[][] {
        new int[] {-1, 3, 84},
        new int[] {5, 0, 45},
        new int[] {6, 0, 46},
        new int[] {16, 0, 47},
        new int[] {26, 0, 48},
        new int[] {27, 0, 49},
        new int[] {28, 0, 50},
        new int[] {29, 0, 51},
      },
      new int[][] {
        new int[] {-1, 3, 85},
        new int[] {26, 0, 48},
        new int[] {27, 0, 49},
        new int[] {28, 0, 50},
        new int[] {29, 0, 51},
      },
      new int[][] {
        new int[] {-1, 3, 86},
        new int[] {26, 0, 48},
        new int[] {27, 0, 49},
        new int[] {28, 0, 50},
        new int[] {29, 0, 51},
      },
      new int[][] {
        new int[] {-1, 3, 87},
        new int[] {8, 0, 108},
      },
      new int[][] {
        new int[] {-1, 1, 17},
      },
      new int[][] {
        new int[] {-1, 3, 89},
        new int[] {3, 0, 109},
      },
      new int[][] {
        new int[] {-1, 1, 43},
        new int[] {5, 0, 45},
        new int[] {6, 0, 46},
        new int[] {16, 0, 47},
        new int[] {26, 0, 48},
        new int[] {27, 0, 49},
        new int[] {28, 0, 50},
        new int[] {29, 0, 51},
      },
      new int[][] {
        new int[] {-1, 1, 6},
      },
      new int[][] {
        new int[] {-1, 1, 8},
      },
      new int[][] {
        new int[] {-1, 3, 93},
        new int[] {9, 0, 111},
      },
      new int[][] {
        new int[] {-1, 1, 64},
      },
      new int[][] {
        new int[] {-1, 3, 95},
        new int[] {5, 0, 45},
        new int[] {6, 0, 46},
        new int[] {16, 0, 47},
        new int[] {26, 0, 48},
        new int[] {27, 0, 49},
        new int[] {28, 0, 50},
        new int[] {29, 0, 51},
      },
      new int[][] {
        new int[] {-1, 3, 96},
        new int[] {5, 0, 45},
        new int[] {6, 0, 46},
        new int[] {16, 0, 47},
        new int[] {26, 0, 48},
        new int[] {27, 0, 49},
        new int[] {28, 0, 50},
        new int[] {29, 0, 51},
      },
      new int[][] {
        new int[] {-1, 3, 97},
        new int[] {9, 0, 114},
        new int[] {20, 0, 19},
        new int[] {22, 0, 20},
        new int[] {26, 0, 21},
      },
      new int[][] {
        new int[] {-1, 1, 33},
      },
      new int[][] {
        new int[] {-1, 1, 55},
        new int[] {1, 0, 85},
        new int[] {4, 0, 86},
      },
      new int[][] {
        new int[] {-1, 1, 56},
        new int[] {1, 0, 85},
        new int[] {4, 0, 86},
      },
      new int[][] {
        new int[] {-1, 1, 49},
        new int[] {0, 0, 78},
        new int[] {5, 0, 79},
      },
      new int[][] {
        new int[] {-1, 1, 51},
        new int[] {0, 0, 78},
        new int[] {5, 0, 79},
      },
      new int[][] {
        new int[] {-1, 1, 50},
        new int[] {0, 0, 78},
        new int[] {5, 0, 79},
      },
      new int[][] {
        new int[] {-1, 1, 52},
        new int[] {0, 0, 78},
        new int[] {5, 0, 79},
      },
      new int[][] {
        new int[] {-1, 1, 53},
        new int[] {0, 0, 78},
        new int[] {5, 0, 79},
      },
      new int[][] {
        new int[] {-1, 1, 58},
      },
      new int[][] {
        new int[] {-1, 1, 59},
      },
      new int[][] {
        new int[] {-1, 3, 108},
        new int[] {9, 0, 116},
        new int[] {20, 0, 19},
        new int[] {22, 0, 20},
        new int[] {26, 0, 21},
      },
      new int[][] {
        new int[] {-1, 1, 19},
      },
      new int[][] {
        new int[] {-1, 1, 42},
      },
      new int[][] {
        new int[] {-1, 1, 9},
      },
      new int[][] {
        new int[] {-1, 1, 45},
        new int[] {14, 0, 96},
      },
      new int[][] {
        new int[] {-1, 1, 47},
      },
      new int[][] {
        new int[] {-1, 1, 22},
        new int[] {21, 0, 118},
      },
      new int[][] {
        new int[] {-1, 3, 115},
        new int[] {9, 0, 120},
      },
      new int[][] {
        new int[] {-1, 1, 20},
      },
      new int[][] {
        new int[] {-1, 3, 117},
        new int[] {9, 0, 121},
      },
      new int[][] {
        new int[] {-1, 3, 118},
        new int[] {8, 0, 122},
      },
      new int[][] {
        new int[] {-1, 1, 24},
      },
      new int[][] {
        new int[] {-1, 1, 23},
        new int[] {21, 0, 118},
      },
      new int[][] {
        new int[] {-1, 1, 21},
      },
      new int[][] {
        new int[] {-1, 3, 122},
        new int[] {9, 0, 124},
        new int[] {20, 0, 19},
        new int[] {22, 0, 20},
        new int[] {26, 0, 21},
      },
      new int[][] {
        new int[] {-1, 1, 25},
      },
      new int[][] {
        new int[] {-1, 1, 26},
      },
      new int[][] {
        new int[] {-1, 3, 125},
        new int[] {9, 0, 126},
      },
      new int[][] {
        new int[] {-1, 1, 27},
      },
    };

    private static int[][][] gotoTable  = {
      new int[][] {
        new int[] {-1, 4},
      },
      new int[][] {
        new int[] {-1, 5},
        new int[] {8, 13},
        new int[] {9, 16},
        new int[] {15, 33},
      },
      new int[][] {
        new int[] {-1, 6},
        new int[] {8, 14},
      },
      new int[][] {
        new int[] {-1, 65},
      },
      new int[][] {
        new int[] {-1, 7},
        new int[] {9, 17},
        new int[] {15, 17},
      },
      new int[][] {
        new int[] {-1, 22},
        new int[] {23, 40},
        new int[] {67, 93},
        new int[] {97, 115},
        new int[] {108, 117},
        new int[] {122, 125},
      },
      new int[][] {
        new int[] {-1, 23},
      },
      new int[][] {
        new int[] {-1, 24},
      },
      new int[][] {
        new int[] {-1, 25},
      },
      new int[][] {
        new int[] {-1, 26},
      },
      new int[][] {
        new int[] {-1, 27},
      },
      new int[][] {
        new int[] {-1, 28},
      },
      new int[][] {
        new int[] {-1, 119},
        new int[] {120, 123},
      },
      new int[][] {
        new int[] {-1, -1},
      },
      new int[][] {
        new int[] {-1, 52},
        new int[] {35, 59},
      },
      new int[][] {
        new int[] {-1, 77},
      },
      new int[][] {
        new int[] {-1, 31},
        new int[] {44, 68},
      },
      new int[][] {
        new int[] {-1, 32},
      },
      new int[][] {
        new int[] {-1, 61},
        new int[] {90, 110},
      },
      new int[][] {
        new int[] {-1, 62},
      },
      new int[][] {
        new int[] {-1, 70},
      },
      new int[][] {
        new int[] {-1, 71},
        new int[] {95, 112},
      },
      new int[][] {
        new int[] {-1, 53},
        new int[] {46, 72},
        new int[] {77, 98},
        new int[] {95, 72},
        new int[] {96, 113},
      },
      new int[][] {
        new int[] {-1, 54},
        new int[] {36, 60},
        new int[] {37, 63},
        new int[] {41, 66},
        new int[] {80, 101},
        new int[] {81, 102},
        new int[] {82, 103},
        new int[] {83, 104},
        new int[] {84, 105},
        new int[] {90, 63},
      },
      new int[][] {
        new int[] {-1, 55},
        new int[] {78, 99},
        new int[] {79, 100},
      },
      new int[][] {
        new int[] {-1, 56},
      },
      new int[][] {
        new int[] {-1, 57},
        new int[] {45, 69},
        new int[] {47, 73},
      },
      new int[][] {
        new int[] {-1, 58},
        new int[] {85, 106},
        new int[] {86, 107},
      },
      new int[][] {
        new int[] {-1, 8},
      },
      new int[][] {
        new int[] {-1, 9},
        new int[] {8, 15},
      },
    };

    private static String[] errorMessages = {
      "expecting: 'main', 'const', id",
      "expecting: '('",
      "expecting: id",
      "expecting: EOF",
      "expecting: 'main', id",
      "expecting: ')', 'if', 'while', id",
      "expecting: ')', id",
      "expecting: '=', '(', id",
      "expecting: ')'",
      "expecting: ')', '}', 'if', 'while', id",
      "expecting: '='",
      "expecting: ')', ','",
      "expecting: '-', '(', '~', id, integer, float, string",
      "expecting: '-', '(', ')', '~', id, integer, float, string",
      "expecting: ';'",
      "expecting: ')', '}'",
      "expecting: '{'",
      "expecting: '(', id, integer, float, string",
      "expecting: '+', '*', ';', '/', '-', ')', '<', '>', '<=', '>=', '&&', '||', '==', ','",
      "expecting: ')', '&&', '||'",
      "expecting: '+', '-', ')', '<', '>', '<=', '>=', '&&', '||', '=='",
      "expecting: '+', ';', '-'",
      "expecting: '+', '-', ')', ','",
      "expecting: '}', 'if', 'while', id",
      "expecting: ')', '||'",
      "expecting: id, integer, float, string",
      "expecting: '}'",
      "expecting: '+', '-', ')', '&&', '||'",
      "expecting: ')', '}', 'if', 'else', 'while', id",
    };

    private static int[] errors = {
      0, 1, 2, 1, 3, 3, 0, 4, 0, 4, 5, 2, 6, 3, 0, 4, 
      3, 4, 3, 1, 1, 7, 8, 9, 9, 9, 9, 9, 9, 10, 2, 8, 
      11, 3, 12, 12, 12, 13, 14, 3, 15, 12, 11, 16, 6, 17, 12, 17, 
      18, 18, 18, 18, 8, 19, 20, 18, 18, 18, 18, 8, 21, 8, 11, 22, 
      9, 14, 21, 23, 8, 18, 24, 19, 19, 18, 16, 12, 12, 12, 12, 12, 
      12, 12, 12, 12, 12, 25, 25, 16, 9, 14, 13, 0, 4, 26, 18, 12, 
      12, 23, 8, 18, 18, 27, 27, 27, 27, 27, 18, 18, 23, 9, 8, 4, 
      19, 19, 28, 26, 9, 26, 16, 9, 28, 9, 23, 9, 9, 26, 9, 
    };
}
}
