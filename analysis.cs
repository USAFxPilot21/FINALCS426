/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using CS426.node;

namespace CS426.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAProg(AProg node);
    void CaseAMainmethod(AMainmethod node);
    void CaseAConstantDeclarations(AConstantDeclarations node);
    void CaseAExpressionConstdec(AExpressionConstdec node);
    void CaseAFunctionDeclarations(AFunctionDeclarations node);
    void CaseAMultipleStmts(AMultipleStmts node);
    void CaseASingleStmts(ASingleStmts node);
    void CaseAAssignStmt(AAssignStmt node);
    void CaseADeclStmt(ADeclStmt node);
    void CaseAFcStmt(AFcStmt node);
    void CaseAWhileStmt(AWhileStmt node);
    void CaseAIfelseStmt(AIfelseStmt node);
    void CaseAAssignstmt(AAssignstmt node);
    void CaseADeclarestmt(ADeclarestmt node);
    void CaseAFunctioncall(AFunctioncall node);
    void CaseALogicwhile(ALogicwhile node);
    void CaseALogicif(ALogicif node);
    void CaseALogicelse(ALogicelse node);
    void CaseAEqualsLogiccomp(AEqualsLogiccomp node);
    void CaseALtLogiccomp(ALtLogiccomp node);
    void CaseALteLogiccomp(ALteLogiccomp node);
    void CaseAGtLogiccomp(AGtLogiccomp node);
    void CaseAGteLogiccomp(AGteLogiccomp node);
    void CaseAMultipleBoolexp(AMultipleBoolexp node);
    void CaseASingleBoolexp(ASingleBoolexp node);
    void CaseAAndBooltools(AAndBooltools node);
    void CaseAOrBooltools(AOrBooltools node);
    void CaseASingleParameters(ASingleParameters node);
    void CaseAMultipleParameters(AMultipleParameters node);
    void CaseANoneParameters(ANoneParameters node);
    void CaseAParameterParameter(AParameterParameter node);
    void CaseASingleArguments(ASingleArguments node);
    void CaseAMultipleArguments(AMultipleArguments node);
    void CaseANoneArguments(ANoneArguments node);
    void CaseAArgument(AArgument node);
    void CaseAOrOrexpr(AOrOrexpr node);
    void CaseAPassOrexpr(APassOrexpr node);
    void CaseAAndAndexpr(AAndAndexpr node);
    void CaseAPassAndexpr(APassAndexpr node);
    void CaseALessthanCompexpr(ALessthanCompexpr node);
    void CaseALessthaneCompexpr(ALessthaneCompexpr node);
    void CaseAGreatthanCompexpr(AGreatthanCompexpr node);
    void CaseAGreatthaneCompexpr(AGreatthaneCompexpr node);
    void CaseAEqualCompexpr(AEqualCompexpr node);
    void CaseAPassCompexpr(APassCompexpr node);
    void CaseAPlusExpr(APlusExpr node);
    void CaseASubtractExpr(ASubtractExpr node);
    void CaseAPassExpr(APassExpr node);
    void CaseAMultExpr2(AMultExpr2 node);
    void CaseADivideExpr2(ADivideExpr2 node);
    void CaseAPassExpr2(APassExpr2 node);
    void CaseANegUniary(ANegUniary node);
    void CaseANotUniary(ANotUniary node);
    void CaseAYesUniary(AYesUniary node);
    void CaseAParensPriority(AParensPriority node);
    void CaseAOperPriority(AOperPriority node);
    void CaseAIntOperand(AIntOperand node);
    void CaseAVariableOperand(AVariableOperand node);
    void CaseAFloatOperand(AFloatOperand node);
    void CaseAStringOperand(AStringOperand node);

    void CaseTPlus(TPlus node);
    void CaseTMult(TMult node);
    void CaseTAssign(TAssign node);
    void CaseTEol(TEol node);
    void CaseTDivide(TDivide node);
    void CaseTSubtract(TSubtract node);
    void CaseTLparen(TLparen node);
    void CaseTRparen(TRparen node);
    void CaseTLb(TLb node);
    void CaseTRb(TRb node);
    void CaseTLt(TLt node);
    void CaseTGt(TGt node);
    void CaseTLte(TLte node);
    void CaseTGte(TGte node);
    void CaseTAnd(TAnd node);
    void CaseTOr(TOr node);
    void CaseTNot(TNot node);
    void CaseTEquals(TEquals node);
    void CaseTComma(TComma node);
    void CaseTPeriod(TPeriod node);
    void CaseTIf(TIf node);
    void CaseTElse(TElse node);
    void CaseTWhile(TWhile node);
    void CaseTMain(TMain node);
    void CaseTReturn(TReturn node);
    void CaseTConstant(TConstant node);
    void CaseTId(TId node);
    void CaseTComment(TComment node);
    void CaseTInteger(TInteger node);
    void CaseTFloat(TFloat node);
    void CaseTString(TString node);
    void CaseTBlank(TBlank node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAProg(AProg node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainmethod(AMainmethod node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConstantDeclarations(AConstantDeclarations node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAExpressionConstdec(AExpressionConstdec node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionDeclarations(AFunctionDeclarations node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleStmts(AMultipleStmts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleStmts(ASingleStmts node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignStmt(AAssignStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclStmt(ADeclStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFcStmt(AFcStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileStmt(AWhileStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfelseStmt(AIfelseStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignstmt(AAssignstmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclarestmt(ADeclarestmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctioncall(AFunctioncall node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALogicwhile(ALogicwhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALogicif(ALogicif node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALogicelse(ALogicelse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEqualsLogiccomp(AEqualsLogiccomp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALtLogiccomp(ALtLogiccomp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALteLogiccomp(ALteLogiccomp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGtLogiccomp(AGtLogiccomp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGteLogiccomp(AGteLogiccomp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleBoolexp(AMultipleBoolexp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleBoolexp(ASingleBoolexp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAndBooltools(AAndBooltools node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOrBooltools(AOrBooltools node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleParameters(ASingleParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleParameters(AMultipleParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneParameters(ANoneParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParameterParameter(AParameterParameter node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleArguments(ASingleArguments node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleArguments(AMultipleArguments node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneArguments(ANoneArguments node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArgument(AArgument node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOrOrexpr(AOrOrexpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassOrexpr(APassOrexpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAndAndexpr(AAndAndexpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassAndexpr(APassAndexpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessthanCompexpr(ALessthanCompexpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessthaneCompexpr(ALessthaneCompexpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreatthanCompexpr(AGreatthanCompexpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreatthaneCompexpr(AGreatthaneCompexpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEqualCompexpr(AEqualCompexpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassCompexpr(APassCompexpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPlusExpr(APlusExpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASubtractExpr(ASubtractExpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpr(APassExpr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultExpr2(AMultExpr2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADivideExpr2(ADivideExpr2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpr2(APassExpr2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANegUniary(ANegUniary node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotUniary(ANotUniary node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAYesUniary(AYesUniary node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParensPriority(AParensPriority node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOperPriority(AOperPriority node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntOperand(AIntOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableOperand(AVariableOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatOperand(AFloatOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringOperand(AStringOperand node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMult(TMult node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAssign(TAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEol(TEol node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDivide(TDivide node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSubtract(TSubtract node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLparen(TLparen node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRparen(TRparen node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLb(TLb node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRb(TRb node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLt(TLt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGt(TGt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLte(TLte node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGte(TGte node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAnd(TAnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOr(TOr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNot(TNot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEquals(TEquals node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPeriod(TPeriod node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIf(TIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTElse(TElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhile(TWhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMain(TMain node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTReturn(TReturn node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTConstant(TConstant node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInteger(TInteger node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFloat(TFloat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBlank(TBlank node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProg().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAProg(AProg node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProg(AProg node)
    {
        DefaultOut(node);
    }

    public override void CaseAProg(AProg node)
    {
        InAProg(node);
        {
            Object[] temp = new Object[node.GetConstantDeclarations().Count];
            node.GetConstantDeclarations().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PConstantDeclarations) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetFunctionDeclarations().Count];
            node.GetFunctionDeclarations().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PFunctionDeclarations) temp[i]).Apply(this);
            }
        }
        if(node.GetMainmethod() != null)
        {
            node.GetMainmethod().Apply(this);
        }
        OutAProg(node);
    }
    public virtual void InAMainmethod(AMainmethod node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainmethod(AMainmethod node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainmethod(AMainmethod node)
    {
        InAMainmethod(node);
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        OutAMainmethod(node);
    }
    public virtual void InAConstantDeclarations(AConstantDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantDeclarations(AConstantDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantDeclarations(AConstantDeclarations node)
    {
        InAConstantDeclarations(node);
        if(node.GetConstant() != null)
        {
            node.GetConstant().Apply(this);
        }
        if(node.GetTypename() != null)
        {
            node.GetTypename().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetConstdec() != null)
        {
            node.GetConstdec().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAConstantDeclarations(node);
    }
    public virtual void InAExpressionConstdec(AExpressionConstdec node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpressionConstdec(AExpressionConstdec node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpressionConstdec(AExpressionConstdec node)
    {
        InAExpressionConstdec(node);
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        OutAExpressionConstdec(node);
    }
    public virtual void InAFunctionDeclarations(AFunctionDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionDeclarations(AFunctionDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionDeclarations(AFunctionDeclarations node)
    {
        InAFunctionDeclarations(node);
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetLb() != null)
        {
            node.GetLb().Apply(this);
        }
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        if(node.GetRb() != null)
        {
            node.GetRb().Apply(this);
        }
        OutAFunctionDeclarations(node);
    }
    public virtual void InAMultipleStmts(AMultipleStmts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStmts(AMultipleStmts node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStmts(AMultipleStmts node)
    {
        InAMultipleStmts(node);
        if(node.GetStmt() != null)
        {
            node.GetStmt().Apply(this);
        }
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        OutAMultipleStmts(node);
    }
    public virtual void InASingleStmts(ASingleStmts node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleStmts(ASingleStmts node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleStmts(ASingleStmts node)
    {
        InASingleStmts(node);
        if(node.GetStmt() != null)
        {
            node.GetStmt().Apply(this);
        }
        OutASingleStmts(node);
    }
    public virtual void InAAssignStmt(AAssignStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStmt(AAssignStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStmt(AAssignStmt node)
    {
        InAAssignStmt(node);
        if(node.GetAssignstmt() != null)
        {
            node.GetAssignstmt().Apply(this);
        }
        OutAAssignStmt(node);
    }
    public virtual void InADeclStmt(ADeclStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclStmt(ADeclStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclStmt(ADeclStmt node)
    {
        InADeclStmt(node);
        if(node.GetDeclarestmt() != null)
        {
            node.GetDeclarestmt().Apply(this);
        }
        OutADeclStmt(node);
    }
    public virtual void InAFcStmt(AFcStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFcStmt(AFcStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAFcStmt(AFcStmt node)
    {
        InAFcStmt(node);
        if(node.GetFunctioncall() != null)
        {
            node.GetFunctioncall().Apply(this);
        }
        OutAFcStmt(node);
    }
    public virtual void InAWhileStmt(AWhileStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStmt(AWhileStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStmt(AWhileStmt node)
    {
        InAWhileStmt(node);
        if(node.GetLogicwhile() != null)
        {
            node.GetLogicwhile().Apply(this);
        }
        OutAWhileStmt(node);
    }
    public virtual void InAIfelseStmt(AIfelseStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfelseStmt(AIfelseStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfelseStmt(AIfelseStmt node)
    {
        InAIfelseStmt(node);
        if(node.GetLogicif() != null)
        {
            node.GetLogicif().Apply(this);
        }
        OutAIfelseStmt(node);
    }
    public virtual void InAAssignstmt(AAssignstmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignstmt(AAssignstmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignstmt(AAssignstmt node)
    {
        InAAssignstmt(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAAssignstmt(node);
    }
    public virtual void InADeclarestmt(ADeclarestmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarestmt(ADeclarestmt node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarestmt(ADeclarestmt node)
    {
        InADeclarestmt(node);
        if(node.GetTypename() != null)
        {
            node.GetTypename().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutADeclarestmt(node);
    }
    public virtual void InAFunctioncall(AFunctioncall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctioncall(AFunctioncall node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctioncall(AFunctioncall node)
    {
        InAFunctioncall(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAFunctioncall(node);
    }
    public virtual void InALogicwhile(ALogicwhile node)
    {
        DefaultIn(node);
    }

    public virtual void OutALogicwhile(ALogicwhile node)
    {
        DefaultOut(node);
    }

    public override void CaseALogicwhile(ALogicwhile node)
    {
        InALogicwhile(node);
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetBoolexp() != null)
        {
            node.GetBoolexp().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetLb() != null)
        {
            node.GetLb().Apply(this);
        }
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        if(node.GetRb() != null)
        {
            node.GetRb().Apply(this);
        }
        OutALogicwhile(node);
    }
    public virtual void InALogicif(ALogicif node)
    {
        DefaultIn(node);
    }

    public virtual void OutALogicif(ALogicif node)
    {
        DefaultOut(node);
    }

    public override void CaseALogicif(ALogicif node)
    {
        InALogicif(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetBoolexp() != null)
        {
            node.GetBoolexp().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetLb() != null)
        {
            node.GetLb().Apply(this);
        }
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        if(node.GetRb() != null)
        {
            node.GetRb().Apply(this);
        }
        if(node.GetLogicelse() != null)
        {
            node.GetLogicelse().Apply(this);
        }
        OutALogicif(node);
    }
    public virtual void InALogicelse(ALogicelse node)
    {
        DefaultIn(node);
    }

    public virtual void OutALogicelse(ALogicelse node)
    {
        DefaultOut(node);
    }

    public override void CaseALogicelse(ALogicelse node)
    {
        InALogicelse(node);
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        if(node.GetLb() != null)
        {
            node.GetLb().Apply(this);
        }
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        if(node.GetRb() != null)
        {
            node.GetRb().Apply(this);
        }
        OutALogicelse(node);
    }
    public virtual void InAEqualsLogiccomp(AEqualsLogiccomp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualsLogiccomp(AEqualsLogiccomp node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualsLogiccomp(AEqualsLogiccomp node)
    {
        InAEqualsLogiccomp(node);
        if(node.GetEquals() != null)
        {
            node.GetEquals().Apply(this);
        }
        OutAEqualsLogiccomp(node);
    }
    public virtual void InALtLogiccomp(ALtLogiccomp node)
    {
        DefaultIn(node);
    }

    public virtual void OutALtLogiccomp(ALtLogiccomp node)
    {
        DefaultOut(node);
    }

    public override void CaseALtLogiccomp(ALtLogiccomp node)
    {
        InALtLogiccomp(node);
        if(node.GetLt() != null)
        {
            node.GetLt().Apply(this);
        }
        OutALtLogiccomp(node);
    }
    public virtual void InALteLogiccomp(ALteLogiccomp node)
    {
        DefaultIn(node);
    }

    public virtual void OutALteLogiccomp(ALteLogiccomp node)
    {
        DefaultOut(node);
    }

    public override void CaseALteLogiccomp(ALteLogiccomp node)
    {
        InALteLogiccomp(node);
        if(node.GetLte() != null)
        {
            node.GetLte().Apply(this);
        }
        OutALteLogiccomp(node);
    }
    public virtual void InAGtLogiccomp(AGtLogiccomp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGtLogiccomp(AGtLogiccomp node)
    {
        DefaultOut(node);
    }

    public override void CaseAGtLogiccomp(AGtLogiccomp node)
    {
        InAGtLogiccomp(node);
        if(node.GetGt() != null)
        {
            node.GetGt().Apply(this);
        }
        OutAGtLogiccomp(node);
    }
    public virtual void InAGteLogiccomp(AGteLogiccomp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGteLogiccomp(AGteLogiccomp node)
    {
        DefaultOut(node);
    }

    public override void CaseAGteLogiccomp(AGteLogiccomp node)
    {
        InAGteLogiccomp(node);
        if(node.GetGte() != null)
        {
            node.GetGte().Apply(this);
        }
        OutAGteLogiccomp(node);
    }
    public virtual void InAMultipleBoolexp(AMultipleBoolexp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleBoolexp(AMultipleBoolexp node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleBoolexp(AMultipleBoolexp node)
    {
        InAMultipleBoolexp(node);
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        if(node.GetBooltools() != null)
        {
            node.GetBooltools().Apply(this);
        }
        if(node.GetSecond() != null)
        {
            node.GetSecond().Apply(this);
        }
        OutAMultipleBoolexp(node);
    }
    public virtual void InASingleBoolexp(ASingleBoolexp node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleBoolexp(ASingleBoolexp node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleBoolexp(ASingleBoolexp node)
    {
        InASingleBoolexp(node);
        if(node.GetCompexpr() != null)
        {
            node.GetCompexpr().Apply(this);
        }
        OutASingleBoolexp(node);
    }
    public virtual void InAAndBooltools(AAndBooltools node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndBooltools(AAndBooltools node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndBooltools(AAndBooltools node)
    {
        InAAndBooltools(node);
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        OutAAndBooltools(node);
    }
    public virtual void InAOrBooltools(AOrBooltools node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrBooltools(AOrBooltools node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrBooltools(AOrBooltools node)
    {
        InAOrBooltools(node);
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        OutAOrBooltools(node);
    }
    public virtual void InASingleParameters(ASingleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleParameters(ASingleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleParameters(ASingleParameters node)
    {
        InASingleParameters(node);
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        OutASingleParameters(node);
    }
    public virtual void InAMultipleParameters(AMultipleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleParameters(AMultipleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleParameters(AMultipleParameters node)
    {
        InAMultipleParameters(node);
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        OutAMultipleParameters(node);
    }
    public virtual void InANoneParameters(ANoneParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneParameters(ANoneParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneParameters(ANoneParameters node)
    {
        InANoneParameters(node);
        OutANoneParameters(node);
    }
    public virtual void InAParameterParameter(AParameterParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParameterParameter(AParameterParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAParameterParameter(AParameterParameter node)
    {
        InAParameterParameter(node);
        if(node.GetTypename() != null)
        {
            node.GetTypename().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        OutAParameterParameter(node);
    }
    public virtual void InASingleArguments(ASingleArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleArguments(ASingleArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleArguments(ASingleArguments node)
    {
        InASingleArguments(node);
        if(node.GetArgument() != null)
        {
            node.GetArgument().Apply(this);
        }
        OutASingleArguments(node);
    }
    public virtual void InAMultipleArguments(AMultipleArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleArguments(AMultipleArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleArguments(AMultipleArguments node)
    {
        InAMultipleArguments(node);
        if(node.GetArgument() != null)
        {
            node.GetArgument().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        OutAMultipleArguments(node);
    }
    public virtual void InANoneArguments(ANoneArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneArguments(ANoneArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneArguments(ANoneArguments node)
    {
        InANoneArguments(node);
        OutANoneArguments(node);
    }
    public virtual void InAArgument(AArgument node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArgument(AArgument node)
    {
        DefaultOut(node);
    }

    public override void CaseAArgument(AArgument node)
    {
        InAArgument(node);
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        OutAArgument(node);
    }
    public virtual void InAOrOrexpr(AOrOrexpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrOrexpr(AOrOrexpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrOrexpr(AOrOrexpr node)
    {
        InAOrOrexpr(node);
        if(node.GetOrexpr() != null)
        {
            node.GetOrexpr().Apply(this);
        }
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        if(node.GetAndexpr() != null)
        {
            node.GetAndexpr().Apply(this);
        }
        OutAOrOrexpr(node);
    }
    public virtual void InAPassOrexpr(APassOrexpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassOrexpr(APassOrexpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassOrexpr(APassOrexpr node)
    {
        InAPassOrexpr(node);
        if(node.GetAndexpr() != null)
        {
            node.GetAndexpr().Apply(this);
        }
        OutAPassOrexpr(node);
    }
    public virtual void InAAndAndexpr(AAndAndexpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndAndexpr(AAndAndexpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndAndexpr(AAndAndexpr node)
    {
        InAAndAndexpr(node);
        if(node.GetAndexpr() != null)
        {
            node.GetAndexpr().Apply(this);
        }
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        if(node.GetCompexpr() != null)
        {
            node.GetCompexpr().Apply(this);
        }
        OutAAndAndexpr(node);
    }
    public virtual void InAPassAndexpr(APassAndexpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassAndexpr(APassAndexpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassAndexpr(APassAndexpr node)
    {
        InAPassAndexpr(node);
        if(node.GetCompexpr() != null)
        {
            node.GetCompexpr().Apply(this);
        }
        OutAPassAndexpr(node);
    }
    public virtual void InALessthanCompexpr(ALessthanCompexpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessthanCompexpr(ALessthanCompexpr node)
    {
        DefaultOut(node);
    }

    public override void CaseALessthanCompexpr(ALessthanCompexpr node)
    {
        InALessthanCompexpr(node);
        if(node.GetLhs() != null)
        {
            node.GetLhs().Apply(this);
        }
        if(node.GetLt() != null)
        {
            node.GetLt().Apply(this);
        }
        if(node.GetRhs() != null)
        {
            node.GetRhs().Apply(this);
        }
        OutALessthanCompexpr(node);
    }
    public virtual void InALessthaneCompexpr(ALessthaneCompexpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessthaneCompexpr(ALessthaneCompexpr node)
    {
        DefaultOut(node);
    }

    public override void CaseALessthaneCompexpr(ALessthaneCompexpr node)
    {
        InALessthaneCompexpr(node);
        if(node.GetLhs() != null)
        {
            node.GetLhs().Apply(this);
        }
        if(node.GetLte() != null)
        {
            node.GetLte().Apply(this);
        }
        if(node.GetRhs() != null)
        {
            node.GetRhs().Apply(this);
        }
        OutALessthaneCompexpr(node);
    }
    public virtual void InAGreatthanCompexpr(AGreatthanCompexpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreatthanCompexpr(AGreatthanCompexpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreatthanCompexpr(AGreatthanCompexpr node)
    {
        InAGreatthanCompexpr(node);
        if(node.GetLhs() != null)
        {
            node.GetLhs().Apply(this);
        }
        if(node.GetGt() != null)
        {
            node.GetGt().Apply(this);
        }
        if(node.GetRhs() != null)
        {
            node.GetRhs().Apply(this);
        }
        OutAGreatthanCompexpr(node);
    }
    public virtual void InAGreatthaneCompexpr(AGreatthaneCompexpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreatthaneCompexpr(AGreatthaneCompexpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreatthaneCompexpr(AGreatthaneCompexpr node)
    {
        InAGreatthaneCompexpr(node);
        if(node.GetLhs() != null)
        {
            node.GetLhs().Apply(this);
        }
        if(node.GetGte() != null)
        {
            node.GetGte().Apply(this);
        }
        if(node.GetRhs() != null)
        {
            node.GetRhs().Apply(this);
        }
        OutAGreatthaneCompexpr(node);
    }
    public virtual void InAEqualCompexpr(AEqualCompexpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualCompexpr(AEqualCompexpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualCompexpr(AEqualCompexpr node)
    {
        InAEqualCompexpr(node);
        if(node.GetLhs() != null)
        {
            node.GetLhs().Apply(this);
        }
        if(node.GetEquals() != null)
        {
            node.GetEquals().Apply(this);
        }
        if(node.GetRhs() != null)
        {
            node.GetRhs().Apply(this);
        }
        OutAEqualCompexpr(node);
    }
    public virtual void InAPassCompexpr(APassCompexpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassCompexpr(APassCompexpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassCompexpr(APassCompexpr node)
    {
        InAPassCompexpr(node);
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        OutAPassCompexpr(node);
    }
    public virtual void InAPlusExpr(APlusExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusExpr(APlusExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusExpr(APlusExpr node)
    {
        InAPlusExpr(node);
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        OutAPlusExpr(node);
    }
    public virtual void InASubtractExpr(ASubtractExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubtractExpr(ASubtractExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseASubtractExpr(ASubtractExpr node)
    {
        InASubtractExpr(node);
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        if(node.GetSubtract() != null)
        {
            node.GetSubtract().Apply(this);
        }
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        OutASubtractExpr(node);
    }
    public virtual void InAPassExpr(APassExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpr(APassExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpr(APassExpr node)
    {
        InAPassExpr(node);
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        OutAPassExpr(node);
    }
    public virtual void InAMultExpr2(AMultExpr2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultExpr2(AMultExpr2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultExpr2(AMultExpr2 node)
    {
        InAMultExpr2(node);
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAMultExpr2(node);
    }
    public virtual void InADivideExpr2(ADivideExpr2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideExpr2(ADivideExpr2 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideExpr2(ADivideExpr2 node)
    {
        InADivideExpr2(node);
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        if(node.GetDivide() != null)
        {
            node.GetDivide().Apply(this);
        }
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutADivideExpr2(node);
    }
    public virtual void InAPassExpr2(APassExpr2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpr2(APassExpr2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpr2(APassExpr2 node)
    {
        InAPassExpr2(node);
        if(node.GetUniary() != null)
        {
            node.GetUniary().Apply(this);
        }
        OutAPassExpr2(node);
    }
    public virtual void InANegUniary(ANegUniary node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegUniary(ANegUniary node)
    {
        DefaultOut(node);
    }

    public override void CaseANegUniary(ANegUniary node)
    {
        InANegUniary(node);
        if(node.GetSubtract() != null)
        {
            node.GetSubtract().Apply(this);
        }
        if(node.GetPriority() != null)
        {
            node.GetPriority().Apply(this);
        }
        OutANegUniary(node);
    }
    public virtual void InANotUniary(ANotUniary node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotUniary(ANotUniary node)
    {
        DefaultOut(node);
    }

    public override void CaseANotUniary(ANotUniary node)
    {
        InANotUniary(node);
        if(node.GetNot() != null)
        {
            node.GetNot().Apply(this);
        }
        if(node.GetPriority() != null)
        {
            node.GetPriority().Apply(this);
        }
        OutANotUniary(node);
    }
    public virtual void InAYesUniary(AYesUniary node)
    {
        DefaultIn(node);
    }

    public virtual void OutAYesUniary(AYesUniary node)
    {
        DefaultOut(node);
    }

    public override void CaseAYesUniary(AYesUniary node)
    {
        InAYesUniary(node);
        if(node.GetPriority() != null)
        {
            node.GetPriority().Apply(this);
        }
        OutAYesUniary(node);
    }
    public virtual void InAParensPriority(AParensPriority node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParensPriority(AParensPriority node)
    {
        DefaultOut(node);
    }

    public override void CaseAParensPriority(AParensPriority node)
    {
        InAParensPriority(node);
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetOrexpr() != null)
        {
            node.GetOrexpr().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        OutAParensPriority(node);
    }
    public virtual void InAOperPriority(AOperPriority node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOperPriority(AOperPriority node)
    {
        DefaultOut(node);
    }

    public override void CaseAOperPriority(AOperPriority node)
    {
        InAOperPriority(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAOperPriority(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
    public virtual void InAFloatOperand(AFloatOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatOperand(AFloatOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatOperand(AFloatOperand node)
    {
        InAFloatOperand(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatOperand(node);
    }
    public virtual void InAStringOperand(AStringOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringOperand(AStringOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringOperand(AStringOperand node)
    {
        InAStringOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringOperand(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProg().Apply(this);
        OutStart(node);
    }

    public virtual void InAProg(AProg node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProg(AProg node)
    {
        DefaultOut(node);
    }

    public override void CaseAProg(AProg node)
    {
        InAProg(node);
        if(node.GetMainmethod() != null)
        {
            node.GetMainmethod().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetFunctionDeclarations().Count];
            node.GetFunctionDeclarations().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PFunctionDeclarations) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetConstantDeclarations().Count];
            node.GetConstantDeclarations().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PConstantDeclarations) temp[i]).Apply(this);
            }
        }
        OutAProg(node);
    }
    public virtual void InAMainmethod(AMainmethod node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainmethod(AMainmethod node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainmethod(AMainmethod node)
    {
        InAMainmethod(node);
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        OutAMainmethod(node);
    }
    public virtual void InAConstantDeclarations(AConstantDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantDeclarations(AConstantDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantDeclarations(AConstantDeclarations node)
    {
        InAConstantDeclarations(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetConstdec() != null)
        {
            node.GetConstdec().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetTypename() != null)
        {
            node.GetTypename().Apply(this);
        }
        if(node.GetConstant() != null)
        {
            node.GetConstant().Apply(this);
        }
        OutAConstantDeclarations(node);
    }
    public virtual void InAExpressionConstdec(AExpressionConstdec node)
    {
        DefaultIn(node);
    }

    public virtual void OutAExpressionConstdec(AExpressionConstdec node)
    {
        DefaultOut(node);
    }

    public override void CaseAExpressionConstdec(AExpressionConstdec node)
    {
        InAExpressionConstdec(node);
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        OutAExpressionConstdec(node);
    }
    public virtual void InAFunctionDeclarations(AFunctionDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionDeclarations(AFunctionDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionDeclarations(AFunctionDeclarations node)
    {
        InAFunctionDeclarations(node);
        if(node.GetRb() != null)
        {
            node.GetRb().Apply(this);
        }
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        if(node.GetLb() != null)
        {
            node.GetLb().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        OutAFunctionDeclarations(node);
    }
    public virtual void InAMultipleStmts(AMultipleStmts node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStmts(AMultipleStmts node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStmts(AMultipleStmts node)
    {
        InAMultipleStmts(node);
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        if(node.GetStmt() != null)
        {
            node.GetStmt().Apply(this);
        }
        OutAMultipleStmts(node);
    }
    public virtual void InASingleStmts(ASingleStmts node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleStmts(ASingleStmts node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleStmts(ASingleStmts node)
    {
        InASingleStmts(node);
        if(node.GetStmt() != null)
        {
            node.GetStmt().Apply(this);
        }
        OutASingleStmts(node);
    }
    public virtual void InAAssignStmt(AAssignStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStmt(AAssignStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStmt(AAssignStmt node)
    {
        InAAssignStmt(node);
        if(node.GetAssignstmt() != null)
        {
            node.GetAssignstmt().Apply(this);
        }
        OutAAssignStmt(node);
    }
    public virtual void InADeclStmt(ADeclStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclStmt(ADeclStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclStmt(ADeclStmt node)
    {
        InADeclStmt(node);
        if(node.GetDeclarestmt() != null)
        {
            node.GetDeclarestmt().Apply(this);
        }
        OutADeclStmt(node);
    }
    public virtual void InAFcStmt(AFcStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFcStmt(AFcStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAFcStmt(AFcStmt node)
    {
        InAFcStmt(node);
        if(node.GetFunctioncall() != null)
        {
            node.GetFunctioncall().Apply(this);
        }
        OutAFcStmt(node);
    }
    public virtual void InAWhileStmt(AWhileStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStmt(AWhileStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStmt(AWhileStmt node)
    {
        InAWhileStmt(node);
        if(node.GetLogicwhile() != null)
        {
            node.GetLogicwhile().Apply(this);
        }
        OutAWhileStmt(node);
    }
    public virtual void InAIfelseStmt(AIfelseStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfelseStmt(AIfelseStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfelseStmt(AIfelseStmt node)
    {
        InAIfelseStmt(node);
        if(node.GetLogicif() != null)
        {
            node.GetLogicif().Apply(this);
        }
        OutAIfelseStmt(node);
    }
    public virtual void InAAssignstmt(AAssignstmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignstmt(AAssignstmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignstmt(AAssignstmt node)
    {
        InAAssignstmt(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAAssignstmt(node);
    }
    public virtual void InADeclarestmt(ADeclarestmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarestmt(ADeclarestmt node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarestmt(ADeclarestmt node)
    {
        InADeclarestmt(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetTypename() != null)
        {
            node.GetTypename().Apply(this);
        }
        OutADeclarestmt(node);
    }
    public virtual void InAFunctioncall(AFunctioncall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctioncall(AFunctioncall node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctioncall(AFunctioncall node)
    {
        InAFunctioncall(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAFunctioncall(node);
    }
    public virtual void InALogicwhile(ALogicwhile node)
    {
        DefaultIn(node);
    }

    public virtual void OutALogicwhile(ALogicwhile node)
    {
        DefaultOut(node);
    }

    public override void CaseALogicwhile(ALogicwhile node)
    {
        InALogicwhile(node);
        if(node.GetRb() != null)
        {
            node.GetRb().Apply(this);
        }
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        if(node.GetLb() != null)
        {
            node.GetLb().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetBoolexp() != null)
        {
            node.GetBoolexp().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        OutALogicwhile(node);
    }
    public virtual void InALogicif(ALogicif node)
    {
        DefaultIn(node);
    }

    public virtual void OutALogicif(ALogicif node)
    {
        DefaultOut(node);
    }

    public override void CaseALogicif(ALogicif node)
    {
        InALogicif(node);
        if(node.GetLogicelse() != null)
        {
            node.GetLogicelse().Apply(this);
        }
        if(node.GetRb() != null)
        {
            node.GetRb().Apply(this);
        }
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        if(node.GetLb() != null)
        {
            node.GetLb().Apply(this);
        }
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetBoolexp() != null)
        {
            node.GetBoolexp().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutALogicif(node);
    }
    public virtual void InALogicelse(ALogicelse node)
    {
        DefaultIn(node);
    }

    public virtual void OutALogicelse(ALogicelse node)
    {
        DefaultOut(node);
    }

    public override void CaseALogicelse(ALogicelse node)
    {
        InALogicelse(node);
        if(node.GetRb() != null)
        {
            node.GetRb().Apply(this);
        }
        if(node.GetStmts() != null)
        {
            node.GetStmts().Apply(this);
        }
        if(node.GetLb() != null)
        {
            node.GetLb().Apply(this);
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        OutALogicelse(node);
    }
    public virtual void InAEqualsLogiccomp(AEqualsLogiccomp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualsLogiccomp(AEqualsLogiccomp node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualsLogiccomp(AEqualsLogiccomp node)
    {
        InAEqualsLogiccomp(node);
        if(node.GetEquals() != null)
        {
            node.GetEquals().Apply(this);
        }
        OutAEqualsLogiccomp(node);
    }
    public virtual void InALtLogiccomp(ALtLogiccomp node)
    {
        DefaultIn(node);
    }

    public virtual void OutALtLogiccomp(ALtLogiccomp node)
    {
        DefaultOut(node);
    }

    public override void CaseALtLogiccomp(ALtLogiccomp node)
    {
        InALtLogiccomp(node);
        if(node.GetLt() != null)
        {
            node.GetLt().Apply(this);
        }
        OutALtLogiccomp(node);
    }
    public virtual void InALteLogiccomp(ALteLogiccomp node)
    {
        DefaultIn(node);
    }

    public virtual void OutALteLogiccomp(ALteLogiccomp node)
    {
        DefaultOut(node);
    }

    public override void CaseALteLogiccomp(ALteLogiccomp node)
    {
        InALteLogiccomp(node);
        if(node.GetLte() != null)
        {
            node.GetLte().Apply(this);
        }
        OutALteLogiccomp(node);
    }
    public virtual void InAGtLogiccomp(AGtLogiccomp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGtLogiccomp(AGtLogiccomp node)
    {
        DefaultOut(node);
    }

    public override void CaseAGtLogiccomp(AGtLogiccomp node)
    {
        InAGtLogiccomp(node);
        if(node.GetGt() != null)
        {
            node.GetGt().Apply(this);
        }
        OutAGtLogiccomp(node);
    }
    public virtual void InAGteLogiccomp(AGteLogiccomp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGteLogiccomp(AGteLogiccomp node)
    {
        DefaultOut(node);
    }

    public override void CaseAGteLogiccomp(AGteLogiccomp node)
    {
        InAGteLogiccomp(node);
        if(node.GetGte() != null)
        {
            node.GetGte().Apply(this);
        }
        OutAGteLogiccomp(node);
    }
    public virtual void InAMultipleBoolexp(AMultipleBoolexp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleBoolexp(AMultipleBoolexp node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleBoolexp(AMultipleBoolexp node)
    {
        InAMultipleBoolexp(node);
        if(node.GetSecond() != null)
        {
            node.GetSecond().Apply(this);
        }
        if(node.GetBooltools() != null)
        {
            node.GetBooltools().Apply(this);
        }
        if(node.GetFirst() != null)
        {
            node.GetFirst().Apply(this);
        }
        OutAMultipleBoolexp(node);
    }
    public virtual void InASingleBoolexp(ASingleBoolexp node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleBoolexp(ASingleBoolexp node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleBoolexp(ASingleBoolexp node)
    {
        InASingleBoolexp(node);
        if(node.GetCompexpr() != null)
        {
            node.GetCompexpr().Apply(this);
        }
        OutASingleBoolexp(node);
    }
    public virtual void InAAndBooltools(AAndBooltools node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndBooltools(AAndBooltools node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndBooltools(AAndBooltools node)
    {
        InAAndBooltools(node);
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        OutAAndBooltools(node);
    }
    public virtual void InAOrBooltools(AOrBooltools node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrBooltools(AOrBooltools node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrBooltools(AOrBooltools node)
    {
        InAOrBooltools(node);
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        OutAOrBooltools(node);
    }
    public virtual void InASingleParameters(ASingleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleParameters(ASingleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleParameters(ASingleParameters node)
    {
        InASingleParameters(node);
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        OutASingleParameters(node);
    }
    public virtual void InAMultipleParameters(AMultipleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleParameters(AMultipleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleParameters(AMultipleParameters node)
    {
        InAMultipleParameters(node);
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        OutAMultipleParameters(node);
    }
    public virtual void InANoneParameters(ANoneParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneParameters(ANoneParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneParameters(ANoneParameters node)
    {
        InANoneParameters(node);
        OutANoneParameters(node);
    }
    public virtual void InAParameterParameter(AParameterParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParameterParameter(AParameterParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAParameterParameter(AParameterParameter node)
    {
        InAParameterParameter(node);
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetTypename() != null)
        {
            node.GetTypename().Apply(this);
        }
        OutAParameterParameter(node);
    }
    public virtual void InASingleArguments(ASingleArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleArguments(ASingleArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleArguments(ASingleArguments node)
    {
        InASingleArguments(node);
        if(node.GetArgument() != null)
        {
            node.GetArgument().Apply(this);
        }
        OutASingleArguments(node);
    }
    public virtual void InAMultipleArguments(AMultipleArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleArguments(AMultipleArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleArguments(AMultipleArguments node)
    {
        InAMultipleArguments(node);
        if(node.GetArguments() != null)
        {
            node.GetArguments().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetArgument() != null)
        {
            node.GetArgument().Apply(this);
        }
        OutAMultipleArguments(node);
    }
    public virtual void InANoneArguments(ANoneArguments node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneArguments(ANoneArguments node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneArguments(ANoneArguments node)
    {
        InANoneArguments(node);
        OutANoneArguments(node);
    }
    public virtual void InAArgument(AArgument node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArgument(AArgument node)
    {
        DefaultOut(node);
    }

    public override void CaseAArgument(AArgument node)
    {
        InAArgument(node);
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        OutAArgument(node);
    }
    public virtual void InAOrOrexpr(AOrOrexpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrOrexpr(AOrOrexpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrOrexpr(AOrOrexpr node)
    {
        InAOrOrexpr(node);
        if(node.GetAndexpr() != null)
        {
            node.GetAndexpr().Apply(this);
        }
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        if(node.GetOrexpr() != null)
        {
            node.GetOrexpr().Apply(this);
        }
        OutAOrOrexpr(node);
    }
    public virtual void InAPassOrexpr(APassOrexpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassOrexpr(APassOrexpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassOrexpr(APassOrexpr node)
    {
        InAPassOrexpr(node);
        if(node.GetAndexpr() != null)
        {
            node.GetAndexpr().Apply(this);
        }
        OutAPassOrexpr(node);
    }
    public virtual void InAAndAndexpr(AAndAndexpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndAndexpr(AAndAndexpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndAndexpr(AAndAndexpr node)
    {
        InAAndAndexpr(node);
        if(node.GetCompexpr() != null)
        {
            node.GetCompexpr().Apply(this);
        }
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        if(node.GetAndexpr() != null)
        {
            node.GetAndexpr().Apply(this);
        }
        OutAAndAndexpr(node);
    }
    public virtual void InAPassAndexpr(APassAndexpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassAndexpr(APassAndexpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassAndexpr(APassAndexpr node)
    {
        InAPassAndexpr(node);
        if(node.GetCompexpr() != null)
        {
            node.GetCompexpr().Apply(this);
        }
        OutAPassAndexpr(node);
    }
    public virtual void InALessthanCompexpr(ALessthanCompexpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessthanCompexpr(ALessthanCompexpr node)
    {
        DefaultOut(node);
    }

    public override void CaseALessthanCompexpr(ALessthanCompexpr node)
    {
        InALessthanCompexpr(node);
        if(node.GetRhs() != null)
        {
            node.GetRhs().Apply(this);
        }
        if(node.GetLt() != null)
        {
            node.GetLt().Apply(this);
        }
        if(node.GetLhs() != null)
        {
            node.GetLhs().Apply(this);
        }
        OutALessthanCompexpr(node);
    }
    public virtual void InALessthaneCompexpr(ALessthaneCompexpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessthaneCompexpr(ALessthaneCompexpr node)
    {
        DefaultOut(node);
    }

    public override void CaseALessthaneCompexpr(ALessthaneCompexpr node)
    {
        InALessthaneCompexpr(node);
        if(node.GetRhs() != null)
        {
            node.GetRhs().Apply(this);
        }
        if(node.GetLte() != null)
        {
            node.GetLte().Apply(this);
        }
        if(node.GetLhs() != null)
        {
            node.GetLhs().Apply(this);
        }
        OutALessthaneCompexpr(node);
    }
    public virtual void InAGreatthanCompexpr(AGreatthanCompexpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreatthanCompexpr(AGreatthanCompexpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreatthanCompexpr(AGreatthanCompexpr node)
    {
        InAGreatthanCompexpr(node);
        if(node.GetRhs() != null)
        {
            node.GetRhs().Apply(this);
        }
        if(node.GetGt() != null)
        {
            node.GetGt().Apply(this);
        }
        if(node.GetLhs() != null)
        {
            node.GetLhs().Apply(this);
        }
        OutAGreatthanCompexpr(node);
    }
    public virtual void InAGreatthaneCompexpr(AGreatthaneCompexpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreatthaneCompexpr(AGreatthaneCompexpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreatthaneCompexpr(AGreatthaneCompexpr node)
    {
        InAGreatthaneCompexpr(node);
        if(node.GetRhs() != null)
        {
            node.GetRhs().Apply(this);
        }
        if(node.GetGte() != null)
        {
            node.GetGte().Apply(this);
        }
        if(node.GetLhs() != null)
        {
            node.GetLhs().Apply(this);
        }
        OutAGreatthaneCompexpr(node);
    }
    public virtual void InAEqualCompexpr(AEqualCompexpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualCompexpr(AEqualCompexpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualCompexpr(AEqualCompexpr node)
    {
        InAEqualCompexpr(node);
        if(node.GetRhs() != null)
        {
            node.GetRhs().Apply(this);
        }
        if(node.GetEquals() != null)
        {
            node.GetEquals().Apply(this);
        }
        if(node.GetLhs() != null)
        {
            node.GetLhs().Apply(this);
        }
        OutAEqualCompexpr(node);
    }
    public virtual void InAPassCompexpr(APassCompexpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassCompexpr(APassCompexpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassCompexpr(APassCompexpr node)
    {
        InAPassCompexpr(node);
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        OutAPassCompexpr(node);
    }
    public virtual void InAPlusExpr(APlusExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusExpr(APlusExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusExpr(APlusExpr node)
    {
        InAPlusExpr(node);
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        OutAPlusExpr(node);
    }
    public virtual void InASubtractExpr(ASubtractExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubtractExpr(ASubtractExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseASubtractExpr(ASubtractExpr node)
    {
        InASubtractExpr(node);
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        if(node.GetSubtract() != null)
        {
            node.GetSubtract().Apply(this);
        }
        if(node.GetExpr() != null)
        {
            node.GetExpr().Apply(this);
        }
        OutASubtractExpr(node);
    }
    public virtual void InAPassExpr(APassExpr node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpr(APassExpr node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpr(APassExpr node)
    {
        InAPassExpr(node);
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        OutAPassExpr(node);
    }
    public virtual void InAMultExpr2(AMultExpr2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultExpr2(AMultExpr2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultExpr2(AMultExpr2 node)
    {
        InAMultExpr2(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        OutAMultExpr2(node);
    }
    public virtual void InADivideExpr2(ADivideExpr2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideExpr2(ADivideExpr2 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideExpr2(ADivideExpr2 node)
    {
        InADivideExpr2(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        if(node.GetDivide() != null)
        {
            node.GetDivide().Apply(this);
        }
        if(node.GetExpr2() != null)
        {
            node.GetExpr2().Apply(this);
        }
        OutADivideExpr2(node);
    }
    public virtual void InAPassExpr2(APassExpr2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpr2(APassExpr2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpr2(APassExpr2 node)
    {
        InAPassExpr2(node);
        if(node.GetUniary() != null)
        {
            node.GetUniary().Apply(this);
        }
        OutAPassExpr2(node);
    }
    public virtual void InANegUniary(ANegUniary node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegUniary(ANegUniary node)
    {
        DefaultOut(node);
    }

    public override void CaseANegUniary(ANegUniary node)
    {
        InANegUniary(node);
        if(node.GetPriority() != null)
        {
            node.GetPriority().Apply(this);
        }
        if(node.GetSubtract() != null)
        {
            node.GetSubtract().Apply(this);
        }
        OutANegUniary(node);
    }
    public virtual void InANotUniary(ANotUniary node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotUniary(ANotUniary node)
    {
        DefaultOut(node);
    }

    public override void CaseANotUniary(ANotUniary node)
    {
        InANotUniary(node);
        if(node.GetPriority() != null)
        {
            node.GetPriority().Apply(this);
        }
        if(node.GetNot() != null)
        {
            node.GetNot().Apply(this);
        }
        OutANotUniary(node);
    }
    public virtual void InAYesUniary(AYesUniary node)
    {
        DefaultIn(node);
    }

    public virtual void OutAYesUniary(AYesUniary node)
    {
        DefaultOut(node);
    }

    public override void CaseAYesUniary(AYesUniary node)
    {
        InAYesUniary(node);
        if(node.GetPriority() != null)
        {
            node.GetPriority().Apply(this);
        }
        OutAYesUniary(node);
    }
    public virtual void InAParensPriority(AParensPriority node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParensPriority(AParensPriority node)
    {
        DefaultOut(node);
    }

    public override void CaseAParensPriority(AParensPriority node)
    {
        InAParensPriority(node);
        if(node.GetRparen() != null)
        {
            node.GetRparen().Apply(this);
        }
        if(node.GetOrexpr() != null)
        {
            node.GetOrexpr().Apply(this);
        }
        if(node.GetLparen() != null)
        {
            node.GetLparen().Apply(this);
        }
        OutAParensPriority(node);
    }
    public virtual void InAOperPriority(AOperPriority node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOperPriority(AOperPriority node)
    {
        DefaultOut(node);
    }

    public override void CaseAOperPriority(AOperPriority node)
    {
        InAOperPriority(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAOperPriority(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
    public virtual void InAFloatOperand(AFloatOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatOperand(AFloatOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatOperand(AFloatOperand node)
    {
        InAFloatOperand(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatOperand(node);
    }
    public virtual void InAStringOperand(AStringOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringOperand(AStringOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringOperand(AStringOperand node)
    {
        InAStringOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringOperand(node);
    }
}
} // namespace CS426.analysis
