/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  CS426.analysis;

namespace CS426.node {

public abstract class PProg : Node
{
}

public abstract class PMainmethod : Node
{
}

public abstract class PConstantDeclarations : Node
{
}

public abstract class PConstdec : Node
{
}

public abstract class PFunctionDeclarations : Node
{
}

public abstract class PStmts : Node
{
}

public abstract class PStmt : Node
{
}

public abstract class PAssignstmt : Node
{
}

public abstract class PDeclarestmt : Node
{
}

public abstract class PFunctioncall : Node
{
}

public abstract class PLogicwhile : Node
{
}

public abstract class PLogicif : Node
{
}

public abstract class PLogicelse : Node
{
}

public abstract class PLogiccomp : Node
{
}

public abstract class PBoolexp : Node
{
}

public abstract class PBooltools : Node
{
}

public abstract class PParameters : Node
{
}

public abstract class PParameter : Node
{
}

public abstract class PArguments : Node
{
}

public abstract class PArgument : Node
{
}

public abstract class POrexpr : Node
{
}

public abstract class PAndexpr : Node
{
}

public abstract class PCompexpr : Node
{
}

public abstract class PExpr : Node
{
}

public abstract class PExpr2 : Node
{
}

public abstract class PUniary : Node
{
}

public abstract class PPriority : Node
{
}

public abstract class POperand : Node
{
}


public sealed class AProg : PProg
{
    private TypedList _constant_declarations_;
    private TypedList _function_declarations_;
    private PMainmethod _mainmethod_;

    public AProg ()
    {
        this._constant_declarations_ = new TypedList(new ConstantDeclarations_Cast(this));
        this._function_declarations_ = new TypedList(new FunctionDeclarations_Cast(this));
    }

    public AProg (
            IList _constant_declarations_,
            IList _function_declarations_,
            PMainmethod _mainmethod_
    )
    {
        this._constant_declarations_ = new TypedList(new ConstantDeclarations_Cast(this));
        this._constant_declarations_.Clear();
        this._constant_declarations_.AddAll(_constant_declarations_);
        this._function_declarations_ = new TypedList(new FunctionDeclarations_Cast(this));
        this._function_declarations_.Clear();
        this._function_declarations_.AddAll(_function_declarations_);
        SetMainmethod (_mainmethod_);
    }

    public override Object Clone()
    {
        return new AProg (
            CloneList (_constant_declarations_),
            CloneList (_function_declarations_),
            (PMainmethod)CloneNode (_mainmethod_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProg(this);
    }

    public IList GetConstantDeclarations ()
    {
        return _constant_declarations_;
    }

    public void setConstantDeclarations (IList list)
    {
        _constant_declarations_.Clear();
        _constant_declarations_.AddAll(list);
    }
    public IList GetFunctionDeclarations ()
    {
        return _function_declarations_;
    }

    public void setFunctionDeclarations (IList list)
    {
        _function_declarations_.Clear();
        _function_declarations_.AddAll(list);
    }
    public PMainmethod GetMainmethod ()
    {
        return _mainmethod_;
    }

    public void SetMainmethod (PMainmethod node)
    {
        if(_mainmethod_ != null)
        {
            _mainmethod_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _mainmethod_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constant_declarations_)
            + ToString (_function_declarations_)
            + ToString (_mainmethod_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constant_declarations_.Contains(child) )
        {
            _constant_declarations_.Remove(child);
            return;
        }
        if ( _function_declarations_.Contains(child) )
        {
            _function_declarations_.Remove(child);
            return;
        }
        if ( _mainmethod_ == child )
        {
            _mainmethod_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _constant_declarations_.Count; i++ )
        {
            Node n = (Node)_constant_declarations_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _constant_declarations_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _constant_declarations_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        for ( int i = 0; i < _function_declarations_.Count; i++ )
        {
            Node n = (Node)_function_declarations_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _function_declarations_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _function_declarations_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _mainmethod_ == oldChild )
        {
            SetMainmethod ((PMainmethod) newChild);
            return;
        }
    }

    private class ConstantDeclarations_Cast : Cast
    {
        AProg obj;

        internal ConstantDeclarations_Cast (AProg obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PConstantDeclarations node = (PConstantDeclarations) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PConstantDeclarations node = (PConstantDeclarations) o;
            node.Parent(null);
            return node;
        }
    }
    private class FunctionDeclarations_Cast : Cast
    {
        AProg obj;

        internal FunctionDeclarations_Cast (AProg obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PFunctionDeclarations node = (PFunctionDeclarations) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PFunctionDeclarations node = (PFunctionDeclarations) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AMainmethod : PMainmethod
{
    private TMain _main_;
    private TLparen _lparen_;
    private PStmts _stmts_;
    private TRparen _rparen_;

    public AMainmethod ()
    {
    }

    public AMainmethod (
            TMain _main_,
            TLparen _lparen_,
            PStmts _stmts_,
            TRparen _rparen_
    )
    {
        SetMain (_main_);
        SetLparen (_lparen_);
        SetStmts (_stmts_);
        SetRparen (_rparen_);
    }

    public override Object Clone()
    {
        return new AMainmethod (
            (TMain)CloneNode (_main_),
            (TLparen)CloneNode (_lparen_),
            (PStmts)CloneNode (_stmts_),
            (TRparen)CloneNode (_rparen_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMainmethod(this);
    }

    public TMain GetMain ()
    {
        return _main_;
    }

    public void SetMain (TMain node)
    {
        if(_main_ != null)
        {
            _main_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_ = node;
    }
    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public PStmts GetStmts ()
    {
        return _stmts_;
    }

    public void SetStmts (PStmts node)
    {
        if(_stmts_ != null)
        {
            _stmts_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stmts_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_main_)
            + ToString (_lparen_)
            + ToString (_stmts_)
            + ToString (_rparen_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _main_ == child )
        {
            _main_ = null;
            return;
        }
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _stmts_ == child )
        {
            _stmts_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _main_ == oldChild )
        {
            SetMain ((TMain) newChild);
            return;
        }
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _stmts_ == oldChild )
        {
            SetStmts ((PStmts) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
    }

}
public sealed class AConstantDeclarations : PConstantDeclarations
{
    private TConstant _constant_;
    private TId _typename_;
    private TId _varname_;
    private TAssign _assign_;
    private PConstdec _constdec_;
    private TEol _eol_;

    public AConstantDeclarations ()
    {
    }

    public AConstantDeclarations (
            TConstant _constant_,
            TId _typename_,
            TId _varname_,
            TAssign _assign_,
            PConstdec _constdec_,
            TEol _eol_
    )
    {
        SetConstant (_constant_);
        SetTypename (_typename_);
        SetVarname (_varname_);
        SetAssign (_assign_);
        SetConstdec (_constdec_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AConstantDeclarations (
            (TConstant)CloneNode (_constant_),
            (TId)CloneNode (_typename_),
            (TId)CloneNode (_varname_),
            (TAssign)CloneNode (_assign_),
            (PConstdec)CloneNode (_constdec_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConstantDeclarations(this);
    }

    public TConstant GetConstant ()
    {
        return _constant_;
    }

    public void SetConstant (TConstant node)
    {
        if(_constant_ != null)
        {
            _constant_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constant_ = node;
    }
    public TId GetTypename ()
    {
        return _typename_;
    }

    public void SetTypename (TId node)
    {
        if(_typename_ != null)
        {
            _typename_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _typename_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PConstdec GetConstdec ()
    {
        return _constdec_;
    }

    public void SetConstdec (PConstdec node)
    {
        if(_constdec_ != null)
        {
            _constdec_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constdec_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constant_)
            + ToString (_typename_)
            + ToString (_varname_)
            + ToString (_assign_)
            + ToString (_constdec_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constant_ == child )
        {
            _constant_ = null;
            return;
        }
        if ( _typename_ == child )
        {
            _typename_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _constdec_ == child )
        {
            _constdec_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constant_ == oldChild )
        {
            SetConstant ((TConstant) newChild);
            return;
        }
        if ( _typename_ == oldChild )
        {
            SetTypename ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _constdec_ == oldChild )
        {
            SetConstdec ((PConstdec) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AExpressionConstdec : PConstdec
{
    private PExpr _expr_;

    public AExpressionConstdec ()
    {
    }

    public AExpressionConstdec (
            PExpr _expr_
    )
    {
        SetExpr (_expr_);
    }

    public override Object Clone()
    {
        return new AExpressionConstdec (
            (PExpr)CloneNode (_expr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExpressionConstdec(this);
    }

    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
    }

}
public sealed class AFunctionDeclarations : PFunctionDeclarations
{
    private TId _varname_;
    private TLparen _lparen_;
    private PParameters _parameters_;
    private TRparen _rparen_;
    private TLb _lb_;
    private PStmts _stmts_;
    private TRb _rb_;

    public AFunctionDeclarations ()
    {
    }

    public AFunctionDeclarations (
            TId _varname_,
            TLparen _lparen_,
            PParameters _parameters_,
            TRparen _rparen_,
            TLb _lb_,
            PStmts _stmts_,
            TRb _rb_
    )
    {
        SetVarname (_varname_);
        SetLparen (_lparen_);
        SetParameters (_parameters_);
        SetRparen (_rparen_);
        SetLb (_lb_);
        SetStmts (_stmts_);
        SetRb (_rb_);
    }

    public override Object Clone()
    {
        return new AFunctionDeclarations (
            (TId)CloneNode (_varname_),
            (TLparen)CloneNode (_lparen_),
            (PParameters)CloneNode (_parameters_),
            (TRparen)CloneNode (_rparen_),
            (TLb)CloneNode (_lb_),
            (PStmts)CloneNode (_stmts_),
            (TRb)CloneNode (_rb_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctionDeclarations(this);
    }

    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public PParameters GetParameters ()
    {
        return _parameters_;
    }

    public void SetParameters (PParameters node)
    {
        if(_parameters_ != null)
        {
            _parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameters_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }
    public TLb GetLb ()
    {
        return _lb_;
    }

    public void SetLb (TLb node)
    {
        if(_lb_ != null)
        {
            _lb_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lb_ = node;
    }
    public PStmts GetStmts ()
    {
        return _stmts_;
    }

    public void SetStmts (PStmts node)
    {
        if(_stmts_ != null)
        {
            _stmts_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stmts_ = node;
    }
    public TRb GetRb ()
    {
        return _rb_;
    }

    public void SetRb (TRb node)
    {
        if(_rb_ != null)
        {
            _rb_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rb_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_varname_)
            + ToString (_lparen_)
            + ToString (_parameters_)
            + ToString (_rparen_)
            + ToString (_lb_)
            + ToString (_stmts_)
            + ToString (_rb_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _parameters_ == child )
        {
            _parameters_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
        if ( _lb_ == child )
        {
            _lb_ = null;
            return;
        }
        if ( _stmts_ == child )
        {
            _stmts_ = null;
            return;
        }
        if ( _rb_ == child )
        {
            _rb_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _parameters_ == oldChild )
        {
            SetParameters ((PParameters) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
        if ( _lb_ == oldChild )
        {
            SetLb ((TLb) newChild);
            return;
        }
        if ( _stmts_ == oldChild )
        {
            SetStmts ((PStmts) newChild);
            return;
        }
        if ( _rb_ == oldChild )
        {
            SetRb ((TRb) newChild);
            return;
        }
    }

}
public sealed class AMultipleStmts : PStmts
{
    private PStmt _stmt_;
    private PStmts _stmts_;

    public AMultipleStmts ()
    {
    }

    public AMultipleStmts (
            PStmt _stmt_,
            PStmts _stmts_
    )
    {
        SetStmt (_stmt_);
        SetStmts (_stmts_);
    }

    public override Object Clone()
    {
        return new AMultipleStmts (
            (PStmt)CloneNode (_stmt_),
            (PStmts)CloneNode (_stmts_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleStmts(this);
    }

    public PStmt GetStmt ()
    {
        return _stmt_;
    }

    public void SetStmt (PStmt node)
    {
        if(_stmt_ != null)
        {
            _stmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stmt_ = node;
    }
    public PStmts GetStmts ()
    {
        return _stmts_;
    }

    public void SetStmts (PStmts node)
    {
        if(_stmts_ != null)
        {
            _stmts_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stmts_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_stmt_)
            + ToString (_stmts_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _stmt_ == child )
        {
            _stmt_ = null;
            return;
        }
        if ( _stmts_ == child )
        {
            _stmts_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _stmt_ == oldChild )
        {
            SetStmt ((PStmt) newChild);
            return;
        }
        if ( _stmts_ == oldChild )
        {
            SetStmts ((PStmts) newChild);
            return;
        }
    }

}
public sealed class ASingleStmts : PStmts
{
    private PStmt _stmt_;

    public ASingleStmts ()
    {
    }

    public ASingleStmts (
            PStmt _stmt_
    )
    {
        SetStmt (_stmt_);
    }

    public override Object Clone()
    {
        return new ASingleStmts (
            (PStmt)CloneNode (_stmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleStmts(this);
    }

    public PStmt GetStmt ()
    {
        return _stmt_;
    }

    public void SetStmt (PStmt node)
    {
        if(_stmt_ != null)
        {
            _stmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_stmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _stmt_ == child )
        {
            _stmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _stmt_ == oldChild )
        {
            SetStmt ((PStmt) newChild);
            return;
        }
    }

}
public sealed class AAssignStmt : PStmt
{
    private PAssignstmt _assignstmt_;

    public AAssignStmt ()
    {
    }

    public AAssignStmt (
            PAssignstmt _assignstmt_
    )
    {
        SetAssignstmt (_assignstmt_);
    }

    public override Object Clone()
    {
        return new AAssignStmt (
            (PAssignstmt)CloneNode (_assignstmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignStmt(this);
    }

    public PAssignstmt GetAssignstmt ()
    {
        return _assignstmt_;
    }

    public void SetAssignstmt (PAssignstmt node)
    {
        if(_assignstmt_ != null)
        {
            _assignstmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignstmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assignstmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assignstmt_ == child )
        {
            _assignstmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assignstmt_ == oldChild )
        {
            SetAssignstmt ((PAssignstmt) newChild);
            return;
        }
    }

}
public sealed class ADeclStmt : PStmt
{
    private PDeclarestmt _declarestmt_;

    public ADeclStmt ()
    {
    }

    public ADeclStmt (
            PDeclarestmt _declarestmt_
    )
    {
        SetDeclarestmt (_declarestmt_);
    }

    public override Object Clone()
    {
        return new ADeclStmt (
            (PDeclarestmt)CloneNode (_declarestmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclStmt(this);
    }

    public PDeclarestmt GetDeclarestmt ()
    {
        return _declarestmt_;
    }

    public void SetDeclarestmt (PDeclarestmt node)
    {
        if(_declarestmt_ != null)
        {
            _declarestmt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declarestmt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declarestmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declarestmt_ == child )
        {
            _declarestmt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declarestmt_ == oldChild )
        {
            SetDeclarestmt ((PDeclarestmt) newChild);
            return;
        }
    }

}
public sealed class AFcStmt : PStmt
{
    private PFunctioncall _functioncall_;

    public AFcStmt ()
    {
    }

    public AFcStmt (
            PFunctioncall _functioncall_
    )
    {
        SetFunctioncall (_functioncall_);
    }

    public override Object Clone()
    {
        return new AFcStmt (
            (PFunctioncall)CloneNode (_functioncall_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFcStmt(this);
    }

    public PFunctioncall GetFunctioncall ()
    {
        return _functioncall_;
    }

    public void SetFunctioncall (PFunctioncall node)
    {
        if(_functioncall_ != null)
        {
            _functioncall_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _functioncall_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_functioncall_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _functioncall_ == child )
        {
            _functioncall_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _functioncall_ == oldChild )
        {
            SetFunctioncall ((PFunctioncall) newChild);
            return;
        }
    }

}
public sealed class AWhileStmt : PStmt
{
    private PLogicwhile _logicwhile_;

    public AWhileStmt ()
    {
    }

    public AWhileStmt (
            PLogicwhile _logicwhile_
    )
    {
        SetLogicwhile (_logicwhile_);
    }

    public override Object Clone()
    {
        return new AWhileStmt (
            (PLogicwhile)CloneNode (_logicwhile_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileStmt(this);
    }

    public PLogicwhile GetLogicwhile ()
    {
        return _logicwhile_;
    }

    public void SetLogicwhile (PLogicwhile node)
    {
        if(_logicwhile_ != null)
        {
            _logicwhile_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logicwhile_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_logicwhile_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _logicwhile_ == child )
        {
            _logicwhile_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _logicwhile_ == oldChild )
        {
            SetLogicwhile ((PLogicwhile) newChild);
            return;
        }
    }

}
public sealed class AIfelseStmt : PStmt
{
    private PLogicif _logicif_;

    public AIfelseStmt ()
    {
    }

    public AIfelseStmt (
            PLogicif _logicif_
    )
    {
        SetLogicif (_logicif_);
    }

    public override Object Clone()
    {
        return new AIfelseStmt (
            (PLogicif)CloneNode (_logicif_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfelseStmt(this);
    }

    public PLogicif GetLogicif ()
    {
        return _logicif_;
    }

    public void SetLogicif (PLogicif node)
    {
        if(_logicif_ != null)
        {
            _logicif_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logicif_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_logicif_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _logicif_ == child )
        {
            _logicif_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _logicif_ == oldChild )
        {
            SetLogicif ((PLogicif) newChild);
            return;
        }
    }

}
public sealed class AAssignstmt : PAssignstmt
{
    private TId _id_;
    private TAssign _assign_;
    private PExpr _expr_;
    private TEol _eol_;

    public AAssignstmt ()
    {
    }

    public AAssignstmt (
            TId _id_,
            TAssign _assign_,
            PExpr _expr_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetAssign (_assign_);
        SetExpr (_expr_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AAssignstmt (
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (PExpr)CloneNode (_expr_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignstmt(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_expr_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class ADeclarestmt : PDeclarestmt
{
    private TId _typename_;
    private TId _varname_;
    private TEol _eol_;

    public ADeclarestmt ()
    {
    }

    public ADeclarestmt (
            TId _typename_,
            TId _varname_,
            TEol _eol_
    )
    {
        SetTypename (_typename_);
        SetVarname (_varname_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new ADeclarestmt (
            (TId)CloneNode (_typename_),
            (TId)CloneNode (_varname_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclarestmt(this);
    }

    public TId GetTypename ()
    {
        return _typename_;
    }

    public void SetTypename (TId node)
    {
        if(_typename_ != null)
        {
            _typename_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _typename_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_typename_)
            + ToString (_varname_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _typename_ == child )
        {
            _typename_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _typename_ == oldChild )
        {
            SetTypename ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AFunctioncall : PFunctioncall
{
    private TId _id_;
    private TLparen _lparen_;
    private PArguments _arguments_;
    private TRparen _rparen_;
    private TEol _eol_;

    public AFunctioncall ()
    {
    }

    public AFunctioncall (
            TId _id_,
            TLparen _lparen_,
            PArguments _arguments_,
            TRparen _rparen_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetLparen (_lparen_);
        SetArguments (_arguments_);
        SetRparen (_rparen_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AFunctioncall (
            (TId)CloneNode (_id_),
            (TLparen)CloneNode (_lparen_),
            (PArguments)CloneNode (_arguments_),
            (TRparen)CloneNode (_rparen_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctioncall(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public PArguments GetArguments ()
    {
        return _arguments_;
    }

    public void SetArguments (PArguments node)
    {
        if(_arguments_ != null)
        {
            _arguments_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arguments_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_lparen_)
            + ToString (_arguments_)
            + ToString (_rparen_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _arguments_ == child )
        {
            _arguments_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _arguments_ == oldChild )
        {
            SetArguments ((PArguments) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class ALogicwhile : PLogicwhile
{
    private TWhile _while_;
    private TLparen _lparen_;
    private PBoolexp _boolexp_;
    private TRparen _rparen_;
    private TLb _lb_;
    private PStmts _stmts_;
    private TRb _rb_;

    public ALogicwhile ()
    {
    }

    public ALogicwhile (
            TWhile _while_,
            TLparen _lparen_,
            PBoolexp _boolexp_,
            TRparen _rparen_,
            TLb _lb_,
            PStmts _stmts_,
            TRb _rb_
    )
    {
        SetWhile (_while_);
        SetLparen (_lparen_);
        SetBoolexp (_boolexp_);
        SetRparen (_rparen_);
        SetLb (_lb_);
        SetStmts (_stmts_);
        SetRb (_rb_);
    }

    public override Object Clone()
    {
        return new ALogicwhile (
            (TWhile)CloneNode (_while_),
            (TLparen)CloneNode (_lparen_),
            (PBoolexp)CloneNode (_boolexp_),
            (TRparen)CloneNode (_rparen_),
            (TLb)CloneNode (_lb_),
            (PStmts)CloneNode (_stmts_),
            (TRb)CloneNode (_rb_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALogicwhile(this);
    }

    public TWhile GetWhile ()
    {
        return _while_;
    }

    public void SetWhile (TWhile node)
    {
        if(_while_ != null)
        {
            _while_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_ = node;
    }
    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public PBoolexp GetBoolexp ()
    {
        return _boolexp_;
    }

    public void SetBoolexp (PBoolexp node)
    {
        if(_boolexp_ != null)
        {
            _boolexp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolexp_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }
    public TLb GetLb ()
    {
        return _lb_;
    }

    public void SetLb (TLb node)
    {
        if(_lb_ != null)
        {
            _lb_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lb_ = node;
    }
    public PStmts GetStmts ()
    {
        return _stmts_;
    }

    public void SetStmts (PStmts node)
    {
        if(_stmts_ != null)
        {
            _stmts_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stmts_ = node;
    }
    public TRb GetRb ()
    {
        return _rb_;
    }

    public void SetRb (TRb node)
    {
        if(_rb_ != null)
        {
            _rb_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rb_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_)
            + ToString (_lparen_)
            + ToString (_boolexp_)
            + ToString (_rparen_)
            + ToString (_lb_)
            + ToString (_stmts_)
            + ToString (_rb_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_ == child )
        {
            _while_ = null;
            return;
        }
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _boolexp_ == child )
        {
            _boolexp_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
        if ( _lb_ == child )
        {
            _lb_ = null;
            return;
        }
        if ( _stmts_ == child )
        {
            _stmts_ = null;
            return;
        }
        if ( _rb_ == child )
        {
            _rb_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_ == oldChild )
        {
            SetWhile ((TWhile) newChild);
            return;
        }
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _boolexp_ == oldChild )
        {
            SetBoolexp ((PBoolexp) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
        if ( _lb_ == oldChild )
        {
            SetLb ((TLb) newChild);
            return;
        }
        if ( _stmts_ == oldChild )
        {
            SetStmts ((PStmts) newChild);
            return;
        }
        if ( _rb_ == oldChild )
        {
            SetRb ((TRb) newChild);
            return;
        }
    }

}
public sealed class ALogicif : PLogicif
{
    private TIf _if_;
    private TLparen _lparen_;
    private PBoolexp _boolexp_;
    private TRparen _rparen_;
    private TLb _lb_;
    private PStmts _stmts_;
    private TRb _rb_;
    private PLogicelse _logicelse_;

    public ALogicif ()
    {
    }

    public ALogicif (
            TIf _if_,
            TLparen _lparen_,
            PBoolexp _boolexp_,
            TRparen _rparen_,
            TLb _lb_,
            PStmts _stmts_,
            TRb _rb_,
            PLogicelse _logicelse_
    )
    {
        SetIf (_if_);
        SetLparen (_lparen_);
        SetBoolexp (_boolexp_);
        SetRparen (_rparen_);
        SetLb (_lb_);
        SetStmts (_stmts_);
        SetRb (_rb_);
        SetLogicelse (_logicelse_);
    }

    public override Object Clone()
    {
        return new ALogicif (
            (TIf)CloneNode (_if_),
            (TLparen)CloneNode (_lparen_),
            (PBoolexp)CloneNode (_boolexp_),
            (TRparen)CloneNode (_rparen_),
            (TLb)CloneNode (_lb_),
            (PStmts)CloneNode (_stmts_),
            (TRb)CloneNode (_rb_),
            (PLogicelse)CloneNode (_logicelse_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALogicif(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public PBoolexp GetBoolexp ()
    {
        return _boolexp_;
    }

    public void SetBoolexp (PBoolexp node)
    {
        if(_boolexp_ != null)
        {
            _boolexp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolexp_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }
    public TLb GetLb ()
    {
        return _lb_;
    }

    public void SetLb (TLb node)
    {
        if(_lb_ != null)
        {
            _lb_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lb_ = node;
    }
    public PStmts GetStmts ()
    {
        return _stmts_;
    }

    public void SetStmts (PStmts node)
    {
        if(_stmts_ != null)
        {
            _stmts_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stmts_ = node;
    }
    public TRb GetRb ()
    {
        return _rb_;
    }

    public void SetRb (TRb node)
    {
        if(_rb_ != null)
        {
            _rb_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rb_ = node;
    }
    public PLogicelse GetLogicelse ()
    {
        return _logicelse_;
    }

    public void SetLogicelse (PLogicelse node)
    {
        if(_logicelse_ != null)
        {
            _logicelse_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logicelse_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_lparen_)
            + ToString (_boolexp_)
            + ToString (_rparen_)
            + ToString (_lb_)
            + ToString (_stmts_)
            + ToString (_rb_)
            + ToString (_logicelse_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _boolexp_ == child )
        {
            _boolexp_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
        if ( _lb_ == child )
        {
            _lb_ = null;
            return;
        }
        if ( _stmts_ == child )
        {
            _stmts_ = null;
            return;
        }
        if ( _rb_ == child )
        {
            _rb_ = null;
            return;
        }
        if ( _logicelse_ == child )
        {
            _logicelse_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _boolexp_ == oldChild )
        {
            SetBoolexp ((PBoolexp) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
        if ( _lb_ == oldChild )
        {
            SetLb ((TLb) newChild);
            return;
        }
        if ( _stmts_ == oldChild )
        {
            SetStmts ((PStmts) newChild);
            return;
        }
        if ( _rb_ == oldChild )
        {
            SetRb ((TRb) newChild);
            return;
        }
        if ( _logicelse_ == oldChild )
        {
            SetLogicelse ((PLogicelse) newChild);
            return;
        }
    }

}
public sealed class ALogicelse : PLogicelse
{
    private TElse _else_;
    private TLb _lb_;
    private PStmts _stmts_;
    private TRb _rb_;

    public ALogicelse ()
    {
    }

    public ALogicelse (
            TElse _else_,
            TLb _lb_,
            PStmts _stmts_,
            TRb _rb_
    )
    {
        SetElse (_else_);
        SetLb (_lb_);
        SetStmts (_stmts_);
        SetRb (_rb_);
    }

    public override Object Clone()
    {
        return new ALogicelse (
            (TElse)CloneNode (_else_),
            (TLb)CloneNode (_lb_),
            (PStmts)CloneNode (_stmts_),
            (TRb)CloneNode (_rb_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALogicelse(this);
    }

    public TElse GetElse ()
    {
        return _else_;
    }

    public void SetElse (TElse node)
    {
        if(_else_ != null)
        {
            _else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_ = node;
    }
    public TLb GetLb ()
    {
        return _lb_;
    }

    public void SetLb (TLb node)
    {
        if(_lb_ != null)
        {
            _lb_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lb_ = node;
    }
    public PStmts GetStmts ()
    {
        return _stmts_;
    }

    public void SetStmts (PStmts node)
    {
        if(_stmts_ != null)
        {
            _stmts_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stmts_ = node;
    }
    public TRb GetRb ()
    {
        return _rb_;
    }

    public void SetRb (TRb node)
    {
        if(_rb_ != null)
        {
            _rb_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rb_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_else_)
            + ToString (_lb_)
            + ToString (_stmts_)
            + ToString (_rb_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _else_ == child )
        {
            _else_ = null;
            return;
        }
        if ( _lb_ == child )
        {
            _lb_ = null;
            return;
        }
        if ( _stmts_ == child )
        {
            _stmts_ = null;
            return;
        }
        if ( _rb_ == child )
        {
            _rb_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _else_ == oldChild )
        {
            SetElse ((TElse) newChild);
            return;
        }
        if ( _lb_ == oldChild )
        {
            SetLb ((TLb) newChild);
            return;
        }
        if ( _stmts_ == oldChild )
        {
            SetStmts ((PStmts) newChild);
            return;
        }
        if ( _rb_ == oldChild )
        {
            SetRb ((TRb) newChild);
            return;
        }
    }

}
public sealed class AEqualsLogiccomp : PLogiccomp
{
    private TEquals _equals_;

    public AEqualsLogiccomp ()
    {
    }

    public AEqualsLogiccomp (
            TEquals _equals_
    )
    {
        SetEquals (_equals_);
    }

    public override Object Clone()
    {
        return new AEqualsLogiccomp (
            (TEquals)CloneNode (_equals_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEqualsLogiccomp(this);
    }

    public TEquals GetEquals ()
    {
        return _equals_;
    }

    public void SetEquals (TEquals node)
    {
        if(_equals_ != null)
        {
            _equals_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equals_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_equals_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _equals_ == child )
        {
            _equals_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _equals_ == oldChild )
        {
            SetEquals ((TEquals) newChild);
            return;
        }
    }

}
public sealed class ALtLogiccomp : PLogiccomp
{
    private TLt _lt_;

    public ALtLogiccomp ()
    {
    }

    public ALtLogiccomp (
            TLt _lt_
    )
    {
        SetLt (_lt_);
    }

    public override Object Clone()
    {
        return new ALtLogiccomp (
            (TLt)CloneNode (_lt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALtLogiccomp(this);
    }

    public TLt GetLt ()
    {
        return _lt_;
    }

    public void SetLt (TLt node)
    {
        if(_lt_ != null)
        {
            _lt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lt_ == child )
        {
            _lt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lt_ == oldChild )
        {
            SetLt ((TLt) newChild);
            return;
        }
    }

}
public sealed class ALteLogiccomp : PLogiccomp
{
    private TLte _lte_;

    public ALteLogiccomp ()
    {
    }

    public ALteLogiccomp (
            TLte _lte_
    )
    {
        SetLte (_lte_);
    }

    public override Object Clone()
    {
        return new ALteLogiccomp (
            (TLte)CloneNode (_lte_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALteLogiccomp(this);
    }

    public TLte GetLte ()
    {
        return _lte_;
    }

    public void SetLte (TLte node)
    {
        if(_lte_ != null)
        {
            _lte_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lte_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lte_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lte_ == child )
        {
            _lte_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lte_ == oldChild )
        {
            SetLte ((TLte) newChild);
            return;
        }
    }

}
public sealed class AGtLogiccomp : PLogiccomp
{
    private TGt _gt_;

    public AGtLogiccomp ()
    {
    }

    public AGtLogiccomp (
            TGt _gt_
    )
    {
        SetGt (_gt_);
    }

    public override Object Clone()
    {
        return new AGtLogiccomp (
            (TGt)CloneNode (_gt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGtLogiccomp(this);
    }

    public TGt GetGt ()
    {
        return _gt_;
    }

    public void SetGt (TGt node)
    {
        if(_gt_ != null)
        {
            _gt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _gt_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_gt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _gt_ == child )
        {
            _gt_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _gt_ == oldChild )
        {
            SetGt ((TGt) newChild);
            return;
        }
    }

}
public sealed class AGteLogiccomp : PLogiccomp
{
    private TGte _gte_;

    public AGteLogiccomp ()
    {
    }

    public AGteLogiccomp (
            TGte _gte_
    )
    {
        SetGte (_gte_);
    }

    public override Object Clone()
    {
        return new AGteLogiccomp (
            (TGte)CloneNode (_gte_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGteLogiccomp(this);
    }

    public TGte GetGte ()
    {
        return _gte_;
    }

    public void SetGte (TGte node)
    {
        if(_gte_ != null)
        {
            _gte_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _gte_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_gte_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _gte_ == child )
        {
            _gte_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _gte_ == oldChild )
        {
            SetGte ((TGte) newChild);
            return;
        }
    }

}
public sealed class AMultipleBoolexp : PBoolexp
{
    private PCompexpr _first_;
    private PBooltools _booltools_;
    private PCompexpr _second_;

    public AMultipleBoolexp ()
    {
    }

    public AMultipleBoolexp (
            PCompexpr _first_,
            PBooltools _booltools_,
            PCompexpr _second_
    )
    {
        SetFirst (_first_);
        SetBooltools (_booltools_);
        SetSecond (_second_);
    }

    public override Object Clone()
    {
        return new AMultipleBoolexp (
            (PCompexpr)CloneNode (_first_),
            (PBooltools)CloneNode (_booltools_),
            (PCompexpr)CloneNode (_second_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleBoolexp(this);
    }

    public PCompexpr GetFirst ()
    {
        return _first_;
    }

    public void SetFirst (PCompexpr node)
    {
        if(_first_ != null)
        {
            _first_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _first_ = node;
    }
    public PBooltools GetBooltools ()
    {
        return _booltools_;
    }

    public void SetBooltools (PBooltools node)
    {
        if(_booltools_ != null)
        {
            _booltools_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _booltools_ = node;
    }
    public PCompexpr GetSecond ()
    {
        return _second_;
    }

    public void SetSecond (PCompexpr node)
    {
        if(_second_ != null)
        {
            _second_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _second_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_first_)
            + ToString (_booltools_)
            + ToString (_second_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _first_ == child )
        {
            _first_ = null;
            return;
        }
        if ( _booltools_ == child )
        {
            _booltools_ = null;
            return;
        }
        if ( _second_ == child )
        {
            _second_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _first_ == oldChild )
        {
            SetFirst ((PCompexpr) newChild);
            return;
        }
        if ( _booltools_ == oldChild )
        {
            SetBooltools ((PBooltools) newChild);
            return;
        }
        if ( _second_ == oldChild )
        {
            SetSecond ((PCompexpr) newChild);
            return;
        }
    }

}
public sealed class ASingleBoolexp : PBoolexp
{
    private PCompexpr _compexpr_;

    public ASingleBoolexp ()
    {
    }

    public ASingleBoolexp (
            PCompexpr _compexpr_
    )
    {
        SetCompexpr (_compexpr_);
    }

    public override Object Clone()
    {
        return new ASingleBoolexp (
            (PCompexpr)CloneNode (_compexpr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleBoolexp(this);
    }

    public PCompexpr GetCompexpr ()
    {
        return _compexpr_;
    }

    public void SetCompexpr (PCompexpr node)
    {
        if(_compexpr_ != null)
        {
            _compexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _compexpr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_compexpr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _compexpr_ == child )
        {
            _compexpr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _compexpr_ == oldChild )
        {
            SetCompexpr ((PCompexpr) newChild);
            return;
        }
    }

}
public sealed class AAndBooltools : PBooltools
{
    private TAnd _and_;

    public AAndBooltools ()
    {
    }

    public AAndBooltools (
            TAnd _and_
    )
    {
        SetAnd (_and_);
    }

    public override Object Clone()
    {
        return new AAndBooltools (
            (TAnd)CloneNode (_and_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAndBooltools(this);
    }

    public TAnd GetAnd ()
    {
        return _and_;
    }

    public void SetAnd (TAnd node)
    {
        if(_and_ != null)
        {
            _and_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_and_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _and_ == child )
        {
            _and_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _and_ == oldChild )
        {
            SetAnd ((TAnd) newChild);
            return;
        }
    }

}
public sealed class AOrBooltools : PBooltools
{
    private TOr _or_;

    public AOrBooltools ()
    {
    }

    public AOrBooltools (
            TOr _or_
    )
    {
        SetOr (_or_);
    }

    public override Object Clone()
    {
        return new AOrBooltools (
            (TOr)CloneNode (_or_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOrBooltools(this);
    }

    public TOr GetOr ()
    {
        return _or_;
    }

    public void SetOr (TOr node)
    {
        if(_or_ != null)
        {
            _or_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_or_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _or_ == child )
        {
            _or_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _or_ == oldChild )
        {
            SetOr ((TOr) newChild);
            return;
        }
    }

}
public sealed class ASingleParameters : PParameters
{
    private PParameter _parameter_;

    public ASingleParameters ()
    {
    }

    public ASingleParameters (
            PParameter _parameter_
    )
    {
        SetParameter (_parameter_);
    }

    public override Object Clone()
    {
        return new ASingleParameters (
            (PParameter)CloneNode (_parameter_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleParameters(this);
    }

    public PParameter GetParameter ()
    {
        return _parameter_;
    }

    public void SetParameter (PParameter node)
    {
        if(_parameter_ != null)
        {
            _parameter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameter_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_parameter_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _parameter_ == child )
        {
            _parameter_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _parameter_ == oldChild )
        {
            SetParameter ((PParameter) newChild);
            return;
        }
    }

}
public sealed class AMultipleParameters : PParameters
{
    private PParameter _parameter_;
    private TComma _comma_;
    private PParameters _parameters_;

    public AMultipleParameters ()
    {
    }

    public AMultipleParameters (
            PParameter _parameter_,
            TComma _comma_,
            PParameters _parameters_
    )
    {
        SetParameter (_parameter_);
        SetComma (_comma_);
        SetParameters (_parameters_);
    }

    public override Object Clone()
    {
        return new AMultipleParameters (
            (PParameter)CloneNode (_parameter_),
            (TComma)CloneNode (_comma_),
            (PParameters)CloneNode (_parameters_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleParameters(this);
    }

    public PParameter GetParameter ()
    {
        return _parameter_;
    }

    public void SetParameter (PParameter node)
    {
        if(_parameter_ != null)
        {
            _parameter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameter_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PParameters GetParameters ()
    {
        return _parameters_;
    }

    public void SetParameters (PParameters node)
    {
        if(_parameters_ != null)
        {
            _parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameters_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_parameter_)
            + ToString (_comma_)
            + ToString (_parameters_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _parameter_ == child )
        {
            _parameter_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _parameters_ == child )
        {
            _parameters_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _parameter_ == oldChild )
        {
            SetParameter ((PParameter) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _parameters_ == oldChild )
        {
            SetParameters ((PParameters) newChild);
            return;
        }
    }

}
public sealed class ANoneParameters : PParameters
{


    public ANoneParameters (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneParameters (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneParameters(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AParameterParameter : PParameter
{
    private TId _typename_;
    private TId _varname_;

    public AParameterParameter ()
    {
    }

    public AParameterParameter (
            TId _typename_,
            TId _varname_
    )
    {
        SetTypename (_typename_);
        SetVarname (_varname_);
    }

    public override Object Clone()
    {
        return new AParameterParameter (
            (TId)CloneNode (_typename_),
            (TId)CloneNode (_varname_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParameterParameter(this);
    }

    public TId GetTypename ()
    {
        return _typename_;
    }

    public void SetTypename (TId node)
    {
        if(_typename_ != null)
        {
            _typename_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _typename_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_typename_)
            + ToString (_varname_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _typename_ == child )
        {
            _typename_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _typename_ == oldChild )
        {
            SetTypename ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
    }

}
public sealed class ASingleArguments : PArguments
{
    private PArgument _argument_;

    public ASingleArguments ()
    {
    }

    public ASingleArguments (
            PArgument _argument_
    )
    {
        SetArgument (_argument_);
    }

    public override Object Clone()
    {
        return new ASingleArguments (
            (PArgument)CloneNode (_argument_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleArguments(this);
    }

    public PArgument GetArgument ()
    {
        return _argument_;
    }

    public void SetArgument (PArgument node)
    {
        if(_argument_ != null)
        {
            _argument_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _argument_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_argument_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _argument_ == child )
        {
            _argument_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _argument_ == oldChild )
        {
            SetArgument ((PArgument) newChild);
            return;
        }
    }

}
public sealed class AMultipleArguments : PArguments
{
    private PArgument _argument_;
    private TComma _comma_;
    private PArguments _arguments_;

    public AMultipleArguments ()
    {
    }

    public AMultipleArguments (
            PArgument _argument_,
            TComma _comma_,
            PArguments _arguments_
    )
    {
        SetArgument (_argument_);
        SetComma (_comma_);
        SetArguments (_arguments_);
    }

    public override Object Clone()
    {
        return new AMultipleArguments (
            (PArgument)CloneNode (_argument_),
            (TComma)CloneNode (_comma_),
            (PArguments)CloneNode (_arguments_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleArguments(this);
    }

    public PArgument GetArgument ()
    {
        return _argument_;
    }

    public void SetArgument (PArgument node)
    {
        if(_argument_ != null)
        {
            _argument_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _argument_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PArguments GetArguments ()
    {
        return _arguments_;
    }

    public void SetArguments (PArguments node)
    {
        if(_arguments_ != null)
        {
            _arguments_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arguments_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_argument_)
            + ToString (_comma_)
            + ToString (_arguments_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _argument_ == child )
        {
            _argument_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _arguments_ == child )
        {
            _arguments_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _argument_ == oldChild )
        {
            SetArgument ((PArgument) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _arguments_ == oldChild )
        {
            SetArguments ((PArguments) newChild);
            return;
        }
    }

}
public sealed class ANoneArguments : PArguments
{


    public ANoneArguments (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneArguments (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneArguments(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AArgument : PArgument
{
    private PExpr _expr_;

    public AArgument ()
    {
    }

    public AArgument (
            PExpr _expr_
    )
    {
        SetExpr (_expr_);
    }

    public override Object Clone()
    {
        return new AArgument (
            (PExpr)CloneNode (_expr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArgument(this);
    }

    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
    }

}
public sealed class AOrOrexpr : POrexpr
{
    private POrexpr _orexpr_;
    private TOr _or_;
    private PAndexpr _andexpr_;

    public AOrOrexpr ()
    {
    }

    public AOrOrexpr (
            POrexpr _orexpr_,
            TOr _or_,
            PAndexpr _andexpr_
    )
    {
        SetOrexpr (_orexpr_);
        SetOr (_or_);
        SetAndexpr (_andexpr_);
    }

    public override Object Clone()
    {
        return new AOrOrexpr (
            (POrexpr)CloneNode (_orexpr_),
            (TOr)CloneNode (_or_),
            (PAndexpr)CloneNode (_andexpr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOrOrexpr(this);
    }

    public POrexpr GetOrexpr ()
    {
        return _orexpr_;
    }

    public void SetOrexpr (POrexpr node)
    {
        if(_orexpr_ != null)
        {
            _orexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _orexpr_ = node;
    }
    public TOr GetOr ()
    {
        return _or_;
    }

    public void SetOr (TOr node)
    {
        if(_or_ != null)
        {
            _or_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_ = node;
    }
    public PAndexpr GetAndexpr ()
    {
        return _andexpr_;
    }

    public void SetAndexpr (PAndexpr node)
    {
        if(_andexpr_ != null)
        {
            _andexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _andexpr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_orexpr_)
            + ToString (_or_)
            + ToString (_andexpr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _orexpr_ == child )
        {
            _orexpr_ = null;
            return;
        }
        if ( _or_ == child )
        {
            _or_ = null;
            return;
        }
        if ( _andexpr_ == child )
        {
            _andexpr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _orexpr_ == oldChild )
        {
            SetOrexpr ((POrexpr) newChild);
            return;
        }
        if ( _or_ == oldChild )
        {
            SetOr ((TOr) newChild);
            return;
        }
        if ( _andexpr_ == oldChild )
        {
            SetAndexpr ((PAndexpr) newChild);
            return;
        }
    }

}
public sealed class APassOrexpr : POrexpr
{
    private PAndexpr _andexpr_;

    public APassOrexpr ()
    {
    }

    public APassOrexpr (
            PAndexpr _andexpr_
    )
    {
        SetAndexpr (_andexpr_);
    }

    public override Object Clone()
    {
        return new APassOrexpr (
            (PAndexpr)CloneNode (_andexpr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassOrexpr(this);
    }

    public PAndexpr GetAndexpr ()
    {
        return _andexpr_;
    }

    public void SetAndexpr (PAndexpr node)
    {
        if(_andexpr_ != null)
        {
            _andexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _andexpr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_andexpr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _andexpr_ == child )
        {
            _andexpr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _andexpr_ == oldChild )
        {
            SetAndexpr ((PAndexpr) newChild);
            return;
        }
    }

}
public sealed class AAndAndexpr : PAndexpr
{
    private PAndexpr _andexpr_;
    private TAnd _and_;
    private PCompexpr _compexpr_;

    public AAndAndexpr ()
    {
    }

    public AAndAndexpr (
            PAndexpr _andexpr_,
            TAnd _and_,
            PCompexpr _compexpr_
    )
    {
        SetAndexpr (_andexpr_);
        SetAnd (_and_);
        SetCompexpr (_compexpr_);
    }

    public override Object Clone()
    {
        return new AAndAndexpr (
            (PAndexpr)CloneNode (_andexpr_),
            (TAnd)CloneNode (_and_),
            (PCompexpr)CloneNode (_compexpr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAndAndexpr(this);
    }

    public PAndexpr GetAndexpr ()
    {
        return _andexpr_;
    }

    public void SetAndexpr (PAndexpr node)
    {
        if(_andexpr_ != null)
        {
            _andexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _andexpr_ = node;
    }
    public TAnd GetAnd ()
    {
        return _and_;
    }

    public void SetAnd (TAnd node)
    {
        if(_and_ != null)
        {
            _and_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_ = node;
    }
    public PCompexpr GetCompexpr ()
    {
        return _compexpr_;
    }

    public void SetCompexpr (PCompexpr node)
    {
        if(_compexpr_ != null)
        {
            _compexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _compexpr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_andexpr_)
            + ToString (_and_)
            + ToString (_compexpr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _andexpr_ == child )
        {
            _andexpr_ = null;
            return;
        }
        if ( _and_ == child )
        {
            _and_ = null;
            return;
        }
        if ( _compexpr_ == child )
        {
            _compexpr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _andexpr_ == oldChild )
        {
            SetAndexpr ((PAndexpr) newChild);
            return;
        }
        if ( _and_ == oldChild )
        {
            SetAnd ((TAnd) newChild);
            return;
        }
        if ( _compexpr_ == oldChild )
        {
            SetCompexpr ((PCompexpr) newChild);
            return;
        }
    }

}
public sealed class APassAndexpr : PAndexpr
{
    private PCompexpr _compexpr_;

    public APassAndexpr ()
    {
    }

    public APassAndexpr (
            PCompexpr _compexpr_
    )
    {
        SetCompexpr (_compexpr_);
    }

    public override Object Clone()
    {
        return new APassAndexpr (
            (PCompexpr)CloneNode (_compexpr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassAndexpr(this);
    }

    public PCompexpr GetCompexpr ()
    {
        return _compexpr_;
    }

    public void SetCompexpr (PCompexpr node)
    {
        if(_compexpr_ != null)
        {
            _compexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _compexpr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_compexpr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _compexpr_ == child )
        {
            _compexpr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _compexpr_ == oldChild )
        {
            SetCompexpr ((PCompexpr) newChild);
            return;
        }
    }

}
public sealed class ALessthanCompexpr : PCompexpr
{
    private PExpr _lhs_;
    private TLt _lt_;
    private PExpr _rhs_;

    public ALessthanCompexpr ()
    {
    }

    public ALessthanCompexpr (
            PExpr _lhs_,
            TLt _lt_,
            PExpr _rhs_
    )
    {
        SetLhs (_lhs_);
        SetLt (_lt_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new ALessthanCompexpr (
            (PExpr)CloneNode (_lhs_),
            (TLt)CloneNode (_lt_),
            (PExpr)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessthanCompexpr(this);
    }

    public PExpr GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExpr node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public TLt GetLt ()
    {
        return _lt_;
    }

    public void SetLt (TLt node)
    {
        if(_lt_ != null)
        {
            _lt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lt_ = node;
    }
    public PExpr GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExpr node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_lt_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _lt_ == child )
        {
            _lt_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExpr) newChild);
            return;
        }
        if ( _lt_ == oldChild )
        {
            SetLt ((TLt) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExpr) newChild);
            return;
        }
    }

}
public sealed class ALessthaneCompexpr : PCompexpr
{
    private PExpr _lhs_;
    private TLte _lte_;
    private PExpr _rhs_;

    public ALessthaneCompexpr ()
    {
    }

    public ALessthaneCompexpr (
            PExpr _lhs_,
            TLte _lte_,
            PExpr _rhs_
    )
    {
        SetLhs (_lhs_);
        SetLte (_lte_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new ALessthaneCompexpr (
            (PExpr)CloneNode (_lhs_),
            (TLte)CloneNode (_lte_),
            (PExpr)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessthaneCompexpr(this);
    }

    public PExpr GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExpr node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public TLte GetLte ()
    {
        return _lte_;
    }

    public void SetLte (TLte node)
    {
        if(_lte_ != null)
        {
            _lte_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lte_ = node;
    }
    public PExpr GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExpr node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_lte_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _lte_ == child )
        {
            _lte_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExpr) newChild);
            return;
        }
        if ( _lte_ == oldChild )
        {
            SetLte ((TLte) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExpr) newChild);
            return;
        }
    }

}
public sealed class AGreatthanCompexpr : PCompexpr
{
    private PExpr _lhs_;
    private TGt _gt_;
    private PExpr _rhs_;

    public AGreatthanCompexpr ()
    {
    }

    public AGreatthanCompexpr (
            PExpr _lhs_,
            TGt _gt_,
            PExpr _rhs_
    )
    {
        SetLhs (_lhs_);
        SetGt (_gt_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new AGreatthanCompexpr (
            (PExpr)CloneNode (_lhs_),
            (TGt)CloneNode (_gt_),
            (PExpr)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreatthanCompexpr(this);
    }

    public PExpr GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExpr node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public TGt GetGt ()
    {
        return _gt_;
    }

    public void SetGt (TGt node)
    {
        if(_gt_ != null)
        {
            _gt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _gt_ = node;
    }
    public PExpr GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExpr node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_gt_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _gt_ == child )
        {
            _gt_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExpr) newChild);
            return;
        }
        if ( _gt_ == oldChild )
        {
            SetGt ((TGt) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExpr) newChild);
            return;
        }
    }

}
public sealed class AGreatthaneCompexpr : PCompexpr
{
    private PExpr _lhs_;
    private TGte _gte_;
    private PExpr _rhs_;

    public AGreatthaneCompexpr ()
    {
    }

    public AGreatthaneCompexpr (
            PExpr _lhs_,
            TGte _gte_,
            PExpr _rhs_
    )
    {
        SetLhs (_lhs_);
        SetGte (_gte_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new AGreatthaneCompexpr (
            (PExpr)CloneNode (_lhs_),
            (TGte)CloneNode (_gte_),
            (PExpr)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreatthaneCompexpr(this);
    }

    public PExpr GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExpr node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public TGte GetGte ()
    {
        return _gte_;
    }

    public void SetGte (TGte node)
    {
        if(_gte_ != null)
        {
            _gte_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _gte_ = node;
    }
    public PExpr GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExpr node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_gte_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _gte_ == child )
        {
            _gte_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExpr) newChild);
            return;
        }
        if ( _gte_ == oldChild )
        {
            SetGte ((TGte) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExpr) newChild);
            return;
        }
    }

}
public sealed class AEqualCompexpr : PCompexpr
{
    private PExpr _lhs_;
    private TEquals _equals_;
    private PExpr _rhs_;

    public AEqualCompexpr ()
    {
    }

    public AEqualCompexpr (
            PExpr _lhs_,
            TEquals _equals_,
            PExpr _rhs_
    )
    {
        SetLhs (_lhs_);
        SetEquals (_equals_);
        SetRhs (_rhs_);
    }

    public override Object Clone()
    {
        return new AEqualCompexpr (
            (PExpr)CloneNode (_lhs_),
            (TEquals)CloneNode (_equals_),
            (PExpr)CloneNode (_rhs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEqualCompexpr(this);
    }

    public PExpr GetLhs ()
    {
        return _lhs_;
    }

    public void SetLhs (PExpr node)
    {
        if(_lhs_ != null)
        {
            _lhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lhs_ = node;
    }
    public TEquals GetEquals ()
    {
        return _equals_;
    }

    public void SetEquals (TEquals node)
    {
        if(_equals_ != null)
        {
            _equals_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equals_ = node;
    }
    public PExpr GetRhs ()
    {
        return _rhs_;
    }

    public void SetRhs (PExpr node)
    {
        if(_rhs_ != null)
        {
            _rhs_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rhs_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lhs_)
            + ToString (_equals_)
            + ToString (_rhs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lhs_ == child )
        {
            _lhs_ = null;
            return;
        }
        if ( _equals_ == child )
        {
            _equals_ = null;
            return;
        }
        if ( _rhs_ == child )
        {
            _rhs_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lhs_ == oldChild )
        {
            SetLhs ((PExpr) newChild);
            return;
        }
        if ( _equals_ == oldChild )
        {
            SetEquals ((TEquals) newChild);
            return;
        }
        if ( _rhs_ == oldChild )
        {
            SetRhs ((PExpr) newChild);
            return;
        }
    }

}
public sealed class APassCompexpr : PCompexpr
{
    private PExpr _expr_;

    public APassCompexpr ()
    {
    }

    public APassCompexpr (
            PExpr _expr_
    )
    {
        SetExpr (_expr_);
    }

    public override Object Clone()
    {
        return new APassCompexpr (
            (PExpr)CloneNode (_expr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassCompexpr(this);
    }

    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
    }

}
public sealed class APlusExpr : PExpr
{
    private PExpr _expr_;
    private TPlus _plus_;
    private PExpr2 _expr2_;

    public APlusExpr ()
    {
    }

    public APlusExpr (
            PExpr _expr_,
            TPlus _plus_,
            PExpr2 _expr2_
    )
    {
        SetExpr (_expr_);
        SetPlus (_plus_);
        SetExpr2 (_expr2_);
    }

    public override Object Clone()
    {
        return new APlusExpr (
            (PExpr)CloneNode (_expr_),
            (TPlus)CloneNode (_plus_),
            (PExpr2)CloneNode (_expr2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPlusExpr(this);
    }

    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }
    public PExpr2 GetExpr2 ()
    {
        return _expr2_;
    }

    public void SetExpr2 (PExpr2 node)
    {
        if(_expr2_ != null)
        {
            _expr2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expr_)
            + ToString (_plus_)
            + ToString (_expr2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
        if ( _expr2_ == child )
        {
            _expr2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
        if ( _expr2_ == oldChild )
        {
            SetExpr2 ((PExpr2) newChild);
            return;
        }
    }

}
public sealed class ASubtractExpr : PExpr
{
    private PExpr _expr_;
    private TSubtract _subtract_;
    private PExpr2 _expr2_;

    public ASubtractExpr ()
    {
    }

    public ASubtractExpr (
            PExpr _expr_,
            TSubtract _subtract_,
            PExpr2 _expr2_
    )
    {
        SetExpr (_expr_);
        SetSubtract (_subtract_);
        SetExpr2 (_expr2_);
    }

    public override Object Clone()
    {
        return new ASubtractExpr (
            (PExpr)CloneNode (_expr_),
            (TSubtract)CloneNode (_subtract_),
            (PExpr2)CloneNode (_expr2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASubtractExpr(this);
    }

    public PExpr GetExpr ()
    {
        return _expr_;
    }

    public void SetExpr (PExpr node)
    {
        if(_expr_ != null)
        {
            _expr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr_ = node;
    }
    public TSubtract GetSubtract ()
    {
        return _subtract_;
    }

    public void SetSubtract (TSubtract node)
    {
        if(_subtract_ != null)
        {
            _subtract_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _subtract_ = node;
    }
    public PExpr2 GetExpr2 ()
    {
        return _expr2_;
    }

    public void SetExpr2 (PExpr2 node)
    {
        if(_expr2_ != null)
        {
            _expr2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expr_)
            + ToString (_subtract_)
            + ToString (_expr2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expr_ == child )
        {
            _expr_ = null;
            return;
        }
        if ( _subtract_ == child )
        {
            _subtract_ = null;
            return;
        }
        if ( _expr2_ == child )
        {
            _expr2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expr_ == oldChild )
        {
            SetExpr ((PExpr) newChild);
            return;
        }
        if ( _subtract_ == oldChild )
        {
            SetSubtract ((TSubtract) newChild);
            return;
        }
        if ( _expr2_ == oldChild )
        {
            SetExpr2 ((PExpr2) newChild);
            return;
        }
    }

}
public sealed class APassExpr : PExpr
{
    private PExpr2 _expr2_;

    public APassExpr ()
    {
    }

    public APassExpr (
            PExpr2 _expr2_
    )
    {
        SetExpr2 (_expr2_);
    }

    public override Object Clone()
    {
        return new APassExpr (
            (PExpr2)CloneNode (_expr2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpr(this);
    }

    public PExpr2 GetExpr2 ()
    {
        return _expr2_;
    }

    public void SetExpr2 (PExpr2 node)
    {
        if(_expr2_ != null)
        {
            _expr2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expr2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expr2_ == child )
        {
            _expr2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expr2_ == oldChild )
        {
            SetExpr2 ((PExpr2) newChild);
            return;
        }
    }

}
public sealed class AMultExpr2 : PExpr2
{
    private PExpr2 _expr2_;
    private TMult _mult_;
    private POperand _operand_;

    public AMultExpr2 ()
    {
    }

    public AMultExpr2 (
            PExpr2 _expr2_,
            TMult _mult_,
            POperand _operand_
    )
    {
        SetExpr2 (_expr2_);
        SetMult (_mult_);
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new AMultExpr2 (
            (PExpr2)CloneNode (_expr2_),
            (TMult)CloneNode (_mult_),
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultExpr2(this);
    }

    public PExpr2 GetExpr2 ()
    {
        return _expr2_;
    }

    public void SetExpr2 (PExpr2 node)
    {
        if(_expr2_ != null)
        {
            _expr2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr2_ = node;
    }
    public TMult GetMult ()
    {
        return _mult_;
    }

    public void SetMult (TMult node)
    {
        if(_mult_ != null)
        {
            _mult_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _mult_ = node;
    }
    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expr2_)
            + ToString (_mult_)
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expr2_ == child )
        {
            _expr2_ = null;
            return;
        }
        if ( _mult_ == child )
        {
            _mult_ = null;
            return;
        }
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expr2_ == oldChild )
        {
            SetExpr2 ((PExpr2) newChild);
            return;
        }
        if ( _mult_ == oldChild )
        {
            SetMult ((TMult) newChild);
            return;
        }
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class ADivideExpr2 : PExpr2
{
    private PExpr2 _expr2_;
    private TDivide _divide_;
    private POperand _operand_;

    public ADivideExpr2 ()
    {
    }

    public ADivideExpr2 (
            PExpr2 _expr2_,
            TDivide _divide_,
            POperand _operand_
    )
    {
        SetExpr2 (_expr2_);
        SetDivide (_divide_);
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new ADivideExpr2 (
            (PExpr2)CloneNode (_expr2_),
            (TDivide)CloneNode (_divide_),
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADivideExpr2(this);
    }

    public PExpr2 GetExpr2 ()
    {
        return _expr2_;
    }

    public void SetExpr2 (PExpr2 node)
    {
        if(_expr2_ != null)
        {
            _expr2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expr2_ = node;
    }
    public TDivide GetDivide ()
    {
        return _divide_;
    }

    public void SetDivide (TDivide node)
    {
        if(_divide_ != null)
        {
            _divide_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _divide_ = node;
    }
    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expr2_)
            + ToString (_divide_)
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expr2_ == child )
        {
            _expr2_ = null;
            return;
        }
        if ( _divide_ == child )
        {
            _divide_ = null;
            return;
        }
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expr2_ == oldChild )
        {
            SetExpr2 ((PExpr2) newChild);
            return;
        }
        if ( _divide_ == oldChild )
        {
            SetDivide ((TDivide) newChild);
            return;
        }
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class APassExpr2 : PExpr2
{
    private PUniary _uniary_;

    public APassExpr2 ()
    {
    }

    public APassExpr2 (
            PUniary _uniary_
    )
    {
        SetUniary (_uniary_);
    }

    public override Object Clone()
    {
        return new APassExpr2 (
            (PUniary)CloneNode (_uniary_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpr2(this);
    }

    public PUniary GetUniary ()
    {
        return _uniary_;
    }

    public void SetUniary (PUniary node)
    {
        if(_uniary_ != null)
        {
            _uniary_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _uniary_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_uniary_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _uniary_ == child )
        {
            _uniary_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _uniary_ == oldChild )
        {
            SetUniary ((PUniary) newChild);
            return;
        }
    }

}
public sealed class ANegUniary : PUniary
{
    private TSubtract _subtract_;
    private PPriority _priority_;

    public ANegUniary ()
    {
    }

    public ANegUniary (
            TSubtract _subtract_,
            PPriority _priority_
    )
    {
        SetSubtract (_subtract_);
        SetPriority (_priority_);
    }

    public override Object Clone()
    {
        return new ANegUniary (
            (TSubtract)CloneNode (_subtract_),
            (PPriority)CloneNode (_priority_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANegUniary(this);
    }

    public TSubtract GetSubtract ()
    {
        return _subtract_;
    }

    public void SetSubtract (TSubtract node)
    {
        if(_subtract_ != null)
        {
            _subtract_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _subtract_ = node;
    }
    public PPriority GetPriority ()
    {
        return _priority_;
    }

    public void SetPriority (PPriority node)
    {
        if(_priority_ != null)
        {
            _priority_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _priority_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_subtract_)
            + ToString (_priority_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _subtract_ == child )
        {
            _subtract_ = null;
            return;
        }
        if ( _priority_ == child )
        {
            _priority_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _subtract_ == oldChild )
        {
            SetSubtract ((TSubtract) newChild);
            return;
        }
        if ( _priority_ == oldChild )
        {
            SetPriority ((PPriority) newChild);
            return;
        }
    }

}
public sealed class ANotUniary : PUniary
{
    private TNot _not_;
    private PPriority _priority_;

    public ANotUniary ()
    {
    }

    public ANotUniary (
            TNot _not_,
            PPriority _priority_
    )
    {
        SetNot (_not_);
        SetPriority (_priority_);
    }

    public override Object Clone()
    {
        return new ANotUniary (
            (TNot)CloneNode (_not_),
            (PPriority)CloneNode (_priority_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotUniary(this);
    }

    public TNot GetNot ()
    {
        return _not_;
    }

    public void SetNot (TNot node)
    {
        if(_not_ != null)
        {
            _not_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _not_ = node;
    }
    public PPriority GetPriority ()
    {
        return _priority_;
    }

    public void SetPriority (PPriority node)
    {
        if(_priority_ != null)
        {
            _priority_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _priority_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_not_)
            + ToString (_priority_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _not_ == child )
        {
            _not_ = null;
            return;
        }
        if ( _priority_ == child )
        {
            _priority_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _not_ == oldChild )
        {
            SetNot ((TNot) newChild);
            return;
        }
        if ( _priority_ == oldChild )
        {
            SetPriority ((PPriority) newChild);
            return;
        }
    }

}
public sealed class AYesUniary : PUniary
{
    private PPriority _priority_;

    public AYesUniary ()
    {
    }

    public AYesUniary (
            PPriority _priority_
    )
    {
        SetPriority (_priority_);
    }

    public override Object Clone()
    {
        return new AYesUniary (
            (PPriority)CloneNode (_priority_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAYesUniary(this);
    }

    public PPriority GetPriority ()
    {
        return _priority_;
    }

    public void SetPriority (PPriority node)
    {
        if(_priority_ != null)
        {
            _priority_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _priority_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_priority_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _priority_ == child )
        {
            _priority_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _priority_ == oldChild )
        {
            SetPriority ((PPriority) newChild);
            return;
        }
    }

}
public sealed class AParensPriority : PPriority
{
    private TLparen _lparen_;
    private POrexpr _orexpr_;
    private TRparen _rparen_;

    public AParensPriority ()
    {
    }

    public AParensPriority (
            TLparen _lparen_,
            POrexpr _orexpr_,
            TRparen _rparen_
    )
    {
        SetLparen (_lparen_);
        SetOrexpr (_orexpr_);
        SetRparen (_rparen_);
    }

    public override Object Clone()
    {
        return new AParensPriority (
            (TLparen)CloneNode (_lparen_),
            (POrexpr)CloneNode (_orexpr_),
            (TRparen)CloneNode (_rparen_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParensPriority(this);
    }

    public TLparen GetLparen ()
    {
        return _lparen_;
    }

    public void SetLparen (TLparen node)
    {
        if(_lparen_ != null)
        {
            _lparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lparen_ = node;
    }
    public POrexpr GetOrexpr ()
    {
        return _orexpr_;
    }

    public void SetOrexpr (POrexpr node)
    {
        if(_orexpr_ != null)
        {
            _orexpr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _orexpr_ = node;
    }
    public TRparen GetRparen ()
    {
        return _rparen_;
    }

    public void SetRparen (TRparen node)
    {
        if(_rparen_ != null)
        {
            _rparen_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rparen_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lparen_)
            + ToString (_orexpr_)
            + ToString (_rparen_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lparen_ == child )
        {
            _lparen_ = null;
            return;
        }
        if ( _orexpr_ == child )
        {
            _orexpr_ = null;
            return;
        }
        if ( _rparen_ == child )
        {
            _rparen_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lparen_ == oldChild )
        {
            SetLparen ((TLparen) newChild);
            return;
        }
        if ( _orexpr_ == oldChild )
        {
            SetOrexpr ((POrexpr) newChild);
            return;
        }
        if ( _rparen_ == oldChild )
        {
            SetRparen ((TRparen) newChild);
            return;
        }
    }

}
public sealed class AOperPriority : PPriority
{
    private POperand _operand_;

    public AOperPriority ()
    {
    }

    public AOperPriority (
            POperand _operand_
    )
    {
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new AOperPriority (
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOperPriority(this);
    }

    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class AIntOperand : POperand
{
    private TInteger _integer_;

    public AIntOperand ()
    {
    }

    public AIntOperand (
            TInteger _integer_
    )
    {
        SetInteger (_integer_);
    }

    public override Object Clone()
    {
        return new AIntOperand (
            (TInteger)CloneNode (_integer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntOperand(this);
    }

    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_integer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
    }

}
public sealed class AVariableOperand : POperand
{
    private TId _id_;

    public AVariableOperand ()
    {
    }

    public AVariableOperand (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AVariableOperand (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVariableOperand(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class AFloatOperand : POperand
{
    private TFloat _float_;

    public AFloatOperand ()
    {
    }

    public AFloatOperand (
            TFloat _float_
    )
    {
        SetFloat (_float_);
    }

    public override Object Clone()
    {
        return new AFloatOperand (
            (TFloat)CloneNode (_float_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatOperand(this);
    }

    public TFloat GetFloat ()
    {
        return _float_;
    }

    public void SetFloat (TFloat node)
    {
        if(_float_ != null)
        {
            _float_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _float_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_float_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _float_ == child )
        {
            _float_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _float_ == oldChild )
        {
            SetFloat ((TFloat) newChild);
            return;
        }
    }

}
public sealed class AStringOperand : POperand
{
    private TString _string_;

    public AStringOperand ()
    {
    }

    public AStringOperand (
            TString _string_
    )
    {
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new AStringOperand (
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringOperand(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PProg _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PProg _base_,
        EOF _eof_)
    {
        SetPProg(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PProg) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PProg GetPProg()
    {
        return _base_;
    }
    public void SetPProg(PProg node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPProg((PProg) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
